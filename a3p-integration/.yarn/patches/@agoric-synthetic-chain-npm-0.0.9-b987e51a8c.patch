diff --git a/dist/cli/cli.js b/dist/cli/cli.js
index 71fe179d1ddfa1117dcf57a2df5be4156753e6f6..dd228f348b12ac19097ce0bec0d0530da959f4fc 100755
--- a/dist/cli/cli.js
+++ b/dist/cli/cli.js
@@ -152,7 +152,13 @@ FROM ghcr.io/agoric/agoric-3-proposals:${fromTag} as use-${fromTag}
    *
    * - Submit the software-upgrade proposal for planName and run until upgradeHeight, leaving the state-dir ready for next agd.
    */
-  PREPARE({ path: path5, planName, proposalName, upgradeInfo }, lastProposal) {
+  PREPARE({
+    path: path5,
+    planName,
+    proposalName,
+    upgradeInfo,
+    releaseNotes
+  }, lastProposal) {
     return `
 # PREPARE ${proposalName}
 
@@ -160,7 +166,7 @@ FROM ghcr.io/agoric/agoric-3-proposals:${fromTag} as use-${fromTag}
 FROM use-${lastProposal.proposalName} as prepare-${proposalName}
 ENV UPGRADE_TO=${planName} UPGRADE_INFO=${JSON.stringify(
       encodeUpgradeInfo(upgradeInfo)
-    )}
+    )} VALIDATE_UPGRADE_INFO=${!!releaseNotes}
 
 COPY --link --chmod=755 ./proposals/${path5} /usr/src/proposals/${path5}
 COPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_prepare.sh ./upgrade-test-scripts/start_to_to.sh /usr/src/upgrade-test-scripts/
@@ -283,7 +289,7 @@ function writeBakefileProposals(allProposals2, platforms) {
   fs3.writeFileSync("docker-bake.json", JSON.stringify(json, null, 2));
 }
 function writeDockerfile(allProposals2, fromTag) {
-  const blocks = [];
+  const blocks = ["# syntax=docker/dockerfile:1.4"];
   let previousProposal = null;
   if (fromTag) {
     blocks.push(stage.RESUME(fromTag));
diff --git a/dist/cli/cli.js.map b/dist/cli/cli.js.map
index 2a13f04d08ceb065fc1bae2da86517c237c344f7..38339384af55baa16afcae7c363054fd37661e84 100644
--- a/dist/cli/cli.js.map
+++ b/dist/cli/cli.js.map
@@ -1 +1 @@
-{"version":3,"sources":["../../src/cli/cli.ts","../../src/cli/build.ts","../../src/cli/dockerfileGen.ts","../../src/cli/proposals.ts","../../src/cli/doctor.ts","../../src/cli/run.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * @file CLI entrypoint, transpiled during build so Node is the env to run it in\n */\nimport chalk from 'chalk';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\nimport path from 'node:path';\nimport { parseArgs } from 'node:util';\nimport {\n  bakeTarget,\n  buildProposalSubmissions,\n  readBuildConfig,\n} from './build.js';\nimport { writeBakefileProposals, writeDockerfile } from './dockerfileGen.js';\nimport { runDoctor } from './doctor.js';\nimport { imageNameForProposal, readProposals } from './proposals.js';\nimport { debugTestImage, runTestImage } from './run.js';\n\nconst { positionals, values } = parseArgs({\n  options: {\n    match: { short: 'm', type: 'string' },\n    dry: { type: 'boolean' },\n    debug: { type: 'boolean' },\n  },\n  allowPositionals: true,\n});\n\nconst root = path.resolve('.');\nconst buildConfig = readBuildConfig(root);\nconst allProposals = readProposals(root);\n\nconst { match } = values;\nconst proposals = match\n  ? allProposals.filter(p => p.path.includes(match))\n  : allProposals;\n\nconst [cmd] = positionals;\n\n// TODO consider a lib like Commander for auto-gen help\nconst USAGE = `USAGE:\nprepare-build   - generate Docker build configs\n\nbuild           - build the synthetic-chain \"use\" images\n\ntest [--debug]  - build the \"test\" images and run them\ntest -m <name>  - target a particular proposal by substring match\n\ndoctor          - diagnostics and quick fixes\n`;\n\nconst EXPLAIN_MULTIPLATFORM = `\nERROR: docker exporter does not currently support exporting manifest lists\n\nMultiple platforms are configured but Docker does not support multiplatform in one builder.\nUntil https://github.com/docker/roadmap/issues/371, attempting it will error as above.\n\nInstead use a builder that supports multiplatform such as depot.dev.\n`;\n\n/**\n * Put into places files that building depends upon.\n */\nconst prepareDockerBuild = () => {\n  const cliPath = new URL(import.meta.url).pathname;\n  const publicDir = path.resolve(cliPath, '..', '..');\n  // copy and generate files of the build context that aren't in the build contents\n  execSync(`cp -r ${path.resolve(publicDir, 'docker-bake.hcl')} .`);\n  writeDockerfile(allProposals, buildConfig.fromTag);\n  writeBakefileProposals(allProposals, buildConfig.platforms);\n  // copy and generate files to include in the build\n  execSync(`cp -r ${path.resolve(publicDir, 'upgrade-test-scripts')} .`);\n  buildProposalSubmissions(proposals);\n  // set timestamp of build content to zero to avoid invalidating the build cache\n  // (change in contents will still invalidate)\n  execSync(\n    'find upgrade-test-scripts -type f -exec touch -t 197001010000 {} +',\n  );\n};\n\nswitch (cmd) {\n  case 'prepare-build':\n    prepareDockerBuild();\n    break;\n  case 'build': {\n    prepareDockerBuild();\n    // do not encapsulate running Depot. It's a special case which the user should understand.\n    if (buildConfig.platforms) {\n      console.error(EXPLAIN_MULTIPLATFORM);\n      process.exit(1);\n    }\n    bakeTarget('use', values.dry);\n    break;\n  }\n  case 'test':\n    // Always rebuild all test images to keep it simple. With the \"use\" stages\n    // cached, these are pretty fast building doesn't run agd.\n    prepareDockerBuild();\n\n    if (values.debug) {\n      assert(match, '--debug requires -m');\n      assert(proposals.length > 0, 'no proposals match');\n      assert(proposals.length === 1, 'too many proposals match');\n      const proposal = proposals[0];\n      console.log(chalk.yellow.bold(`Debugging ${proposal.proposalName}`));\n      bakeTarget(imageNameForProposal(proposal, 'test').target, values.dry);\n      debugTestImage(proposal);\n      // don't bother to delete the test image because there's just one\n      // and the user probably wants to run it again.\n    } else {\n      for (const proposal of proposals) {\n        console.log(chalk.cyan.bold(`Testing ${proposal.proposalName}`));\n        const image = imageNameForProposal(proposal, 'test');\n        bakeTarget(image.target, values.dry);\n        runTestImage(proposal);\n        // delete the image to reclaim disk space. The next build\n        // will use the build cache.\n        execSync('docker system df', { stdio: 'inherit' });\n        execSync(`docker rmi ${image.name}`, { stdio: 'inherit' });\n        execSync('docker system df', { stdio: 'inherit' });\n      }\n    }\n    break;\n  case 'doctor':\n    runDoctor(allProposals);\n    break;\n  default:\n    console.log(USAGE);\n}\n","import { execSync } from 'node:child_process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { ProposalInfo } from './proposals.js';\n\nexport type Platform = 'linux/amd64' | 'linux/arm64';\n\nexport type AgoricSyntheticChainConfig = {\n  /**\n   * The agoric-3-proposals tag to build the agoric synthetic chain from.\n   * If `null`, the chain is built from an ag0 genesis.\n   * Defaults to `latest`, which containing all passed proposals\n   */\n  fromTag: string | null;\n  platforms?: Platform[];\n};\n\nconst defaultConfig: AgoricSyntheticChainConfig = {\n  // Tag of the agoric-3 image containing all passed proposals\n  // Must match the Bake file and CI config\n  fromTag: 'latest',\n};\n\nexport function readBuildConfig(root: string): AgoricSyntheticChainConfig {\n  const packageJsonPath = path.join(root, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricSyntheticChain } = JSON.parse(packageJson);\n\n  const config = { ...defaultConfig, ...agoricSyntheticChain };\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  return config;\n}\n\nexport const buildProposalSubmissions = (proposals: ProposalInfo[]) => {\n  for (const proposal of proposals) {\n    if (!('source' in proposal && proposal.source === 'build')) continue;\n\n    console.log(\n      'Refreshing submission for',\n      proposal.proposalIdentifier,\n      proposal.proposalName,\n    );\n    const { buildScript } = proposal;\n    const proposalPath = `proposals/${path}`;\n    const submissionPath = `${proposalPath}/submission`;\n    const relativeBuildScript = path.relative(submissionPath, buildScript);\n\n    execSync(`mkdir -p ${submissionPath}`);\n    // Generate files only in submission path.\n    execSync(`agoric run ${relativeBuildScript}`, {\n      cwd: submissionPath,\n      env: { ...process.env, HOME: '.' },\n    });\n    // find the one file ending in -plan.json\n    // TODO error if there is more than one\n    const planPath = execSync(\n      `find ${submissionPath} -maxdepth 1 -type f -name '*-plan.json'`,\n    )\n      .toString()\n      .trim();\n    const plan = JSON.parse(fs.readFileSync(planPath, 'utf-8'));\n    for (const { fileName } of plan.bundles) {\n      // Copy the bundle into the submission path.\n      execSync(`cp ${fileName} ${submissionPath}`);\n      // Set timestamp to zero to avoid invalidating the build cache\n      execSync(`touch -t 197001010000 ${submissionPath}/${fileName}`);\n    }\n  }\n};\n\n/**\n * Bake images using the docker buildx bake command.\n *\n * Note this uses `--load` which pushes the completed images to the builder,\n * consuming 2-3 GB per image.\n * @see {@link https://docs.docker.com/engine/reference/commandline/buildx_build/#load}\n *\n * @param target - The image or group target\n * @param [dry] - Whether to skip building and just print the build config.\n */\nexport const bakeTarget = (target: string, dry = false) => {\n  const cmd = `docker buildx bake --load ${target} ${dry ? '--print' : ''}`;\n  console.log(cmd);\n  execSync(cmd, { stdio: 'inherit' });\n};\n","import fs from 'node:fs';\nimport {\n  type CoreEvalProposal,\n  type ProposalInfo,\n  type SoftwareUpgradeProposal,\n  encodeUpgradeInfo,\n  imageNameForProposal,\n  isPassed,\n  ParameterChangeProposal,\n} from './proposals.js';\nimport { Platform } from './build.js';\n\n/**\n * Templates for Dockerfile stages\n */\nconst stage = {\n  /**\n   * Prepare an upgrade from ag0, start of the chain\n   */\n  PREPARE_ZERO(proposalName: string, to: string) {\n    const agZeroUpgrade = 'agoric-upgrade-7-2';\n    return `\n## START\n# on ${agZeroUpgrade}, with upgrade to ${to}\nFROM ghcr.io/agoric/ag0:${agZeroUpgrade} as prepare-${proposalName}\nENV UPGRADE_TO=${to}\n\n# put env functions into shell environment\nRUN echo '. /usr/src/upgrade-test-scripts/env_setup.sh' >> ~/.bashrc\n\n# copy scripts\nCOPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_prepare_zero.sh /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\n# this is the only layer that starts ag0\nRUN /usr/src/upgrade-test-scripts/run_prepare_zero.sh\n`;\n  },\n  /**\n   * Resume from state of an existing image.\n   * Creates a \"use\" stage upon which a PREPARE or EVAL can stack.\n   */\n  RESUME(fromTag: string) {\n    return `\n## RESUME\nFROM ghcr.io/agoric/agoric-3-proposals:${fromTag} as use-${fromTag}\n`;\n  },\n\n  /**\n   * Prepare an upgrade handler to run.\n   *\n   * - Submit the software-upgrade proposal for planName and run until upgradeHeight, leaving the state-dir ready for next agd.\n   */\n  PREPARE(\n    { path, planName, proposalName, upgradeInfo }: SoftwareUpgradeProposal,\n    lastProposal: ProposalInfo,\n  ) {\n    return `\n# PREPARE ${proposalName}\n\n# upgrading to ${planName}\nFROM use-${lastProposal.proposalName} as prepare-${proposalName}\nENV UPGRADE_TO=${planName} UPGRADE_INFO=${JSON.stringify(\n      encodeUpgradeInfo(upgradeInfo),\n    )}\n\nCOPY --link --chmod=755 ./proposals/${path} /usr/src/proposals/${path}\nCOPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_prepare.sh ./upgrade-test-scripts/start_to_to.sh /usr/src/upgrade-test-scripts/\nWORKDIR /usr/src/upgrade-test-scripts\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_prepare.sh ${path}\n`;\n  },\n  /**\n   * Execute a prepared upgrade.\n   * - Start agd with the SDK that has the upgradeHandler\n   * - Run any core-evals associated with the proposal (either the ones specified in prepare, or straight from the proposal)\n   */\n  EXECUTE({\n    path,\n    planName,\n    proposalName,\n    sdkImageTag,\n  }: SoftwareUpgradeProposal) {\n    return `\n# EXECUTE ${proposalName}\nFROM ghcr.io/agoric/agoric-sdk:${sdkImageTag} as execute-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# base is a fresh sdk image so set up the proposal and its dependencies\nCOPY --link --chmod=755 ./proposals/${path} /usr/src/proposals/${path}\nCOPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_execute.sh  ./upgrade-test-scripts/start_to_to.sh ./upgrade-test-scripts/install_deps.sh /usr/src/upgrade-test-scripts/\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\nCOPY --link --from=prepare-${proposalName} /root/.agoric /root/.agoric\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_execute.sh ${planName}\n`;\n  },\n  /**\n   * Run a core-eval proposal\n   * - Run the core-eval scripts from the proposal. They are only guaranteed to have started, not completed.\n   */\n  EVAL(\n    { path, proposalName }: CoreEvalProposal | ParameterChangeProposal,\n    lastProposal: ProposalInfo,\n  ) {\n    return `\n# EVAL ${proposalName}\nFROM use-${lastProposal.proposalName} as eval-${proposalName}\n\nCOPY --link --chmod=755 ./proposals/${path} /usr/src/proposals/${path}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# First stage of this proposal so install its deps.\nCOPY --link ./upgrade-test-scripts/install_deps.sh /usr/src/upgrade-test-scripts/\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\nCOPY --link --chmod=755 ./upgrade-test-scripts/*eval* /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_eval.sh ${path}\n`;\n  },\n  /**\n   * Use the proposal\n   *\n   * - Perform any mutations that should be part of chain history\n   */\n  USE({ path, proposalName, type }: ProposalInfo) {\n    const previousStage =\n      type === 'Software Upgrade Proposal' ? 'execute' : 'eval';\n    return `\n# USE ${proposalName}\nFROM ${previousStage}-${proposalName} as use-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\nCOPY --link --chmod=755 ./upgrade-test-scripts/run_use.sh ./upgrade-test-scripts/start_agd.sh /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_use.sh ${path}\nENTRYPOINT ./start_agd.sh\n`;\n  },\n  /**\n   * Generate image than can test the proposal\n   *\n   * - Run with the image of the last \"use\"\n   * - Run tests of the proposal\n   *\n   * Needs to be an image to have access to the SwingSet db. run it with `docker run --rm` to not make the container ephemeral.\n   */\n  TEST({ path, proposalName }: ProposalInfo) {\n    return `\n# TEST ${proposalName}\nFROM use-${proposalName} as test-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\nCOPY --link --chmod=755 ./upgrade-test-scripts/run_test.sh /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\nENTRYPOINT ./run_test.sh ${path}\n`;\n  },\n  /**\n   * The last target in the file, for untargeted `docker build`\n   */\n  LAST(lastProposal: ProposalInfo) {\n    // Assumes the 'use' image is built and tagged.\n    // This isn't necessary for a multi-stage build, but without it CI\n    // rebuilds the last \"use\" image during the \"default\" image step\n    // Some background: https://github.com/moby/moby/issues/34715\n    const useImage = imageNameForProposal(lastProposal, 'use').name;\n    return `\n# LAST\nFROM ${useImage} as latest\n`;\n  },\n};\n\nexport function writeBakefileProposals(\n  allProposals: ProposalInfo[],\n  platforms?: Platform[],\n) {\n  const json = {\n    variable: {\n      PLATFORMS: {\n        default: platforms || null,\n      },\n      PROPOSALS: {\n        default: allProposals.map(p => p.proposalName),\n      },\n    },\n  };\n  fs.writeFileSync('docker-bake.json', JSON.stringify(json, null, 2));\n}\n\nexport function writeDockerfile(\n  allProposals: ProposalInfo[],\n  fromTag?: string | null,\n) {\n  // Each stage tests something about the left argument and prepare an upgrade to the right side (by passing the proposal and halting the chain.)\n  // The upgrade doesn't happen until the next stage begins executing.\n  const blocks: string[] = [];\n\n  let previousProposal: ProposalInfo | null = null;\n\n  // appending to a previous image, so set up the 'use' stage\n  if (fromTag) {\n    blocks.push(stage.RESUME(fromTag));\n    // define a previous proposal that matches what later stages expect\n    previousProposal = {\n      proposalName: fromTag,\n      proposalIdentifier: fromTag,\n      // XXX these are bogus\n      path: 'VIRTUAL',\n      type: '/agoric.swingset.CoreEvalProposal',\n      source: 'subdir',\n    };\n  }\n  for (const proposal of allProposals) {\n    // UNTIL region support https://github.com/microsoft/vscode-docker/issues/230\n    blocks.push(\n      `#----------------\\n# ${proposal.proposalName}\\n#----------------`,\n    );\n\n    switch (proposal.type) {\n      case '/agoric.swingset.CoreEvalProposal':\n      case '/cosmos.params.v1beta1.ParameterChangeProposal':\n        blocks.push(stage.EVAL(proposal, previousProposal!));\n        break;\n      case 'Software Upgrade Proposal':\n        // handle the first proposal specially\n        if (previousProposal) {\n          blocks.push(stage.PREPARE(proposal, previousProposal));\n        } else {\n          blocks.push(\n            stage.PREPARE_ZERO(proposal.proposalName, proposal.planName),\n          );\n        }\n        blocks.push(stage.EXECUTE(proposal));\n        break;\n      default:\n        // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n        // @ts-expect-error exhaustive switch narrowed type to `never`\n        throw new Error(`unsupported proposal type ${proposal.type}`);\n    }\n\n    // The stages must be output in dependency order because if the builder finds a FROM\n    // that it hasn't built yet, it will search for it in the registry. But it won't be there!\n    blocks.push(stage.USE(proposal));\n    blocks.push(stage.TEST(proposal));\n    previousProposal = proposal;\n  }\n  // If one of the proposals is a passed proposal, make the latest one the default entrypoint\n  const lastPassed = allProposals.findLast(isPassed);\n  if (lastPassed) {\n    blocks.push(stage.LAST(lastPassed));\n  }\n\n  const contents = blocks.join('\\n');\n  fs.writeFileSync('Dockerfile', contents);\n}\n","import assert from 'node:assert';\nimport fs from 'node:fs';\nimport * as path from 'node:path';\n\nexport const repository = 'ghcr.io/agoric/agoric-3-proposals';\n\ntype ProposalCommon = {\n  path: string; // in the proposals directory\n  proposalName: string;\n  proposalIdentifier: string;\n};\n\nexport type SoftwareUpgradeProposal = ProposalCommon & {\n  sdkImageTag: string;\n  planName: string;\n  upgradeInfo?: unknown;\n  releaseNodes: string;\n  type: 'Software Upgrade Proposal';\n};\n\nexport type CoreEvalProposal = ProposalCommon & {\n  type: '/agoric.swingset.CoreEvalProposal';\n} & (\n    | { source: 'build'; buildScript: string }\n    | {\n        // default behavior\n        source: 'subdir';\n      }\n  );\n\nexport type ParameterChangeProposal = ProposalCommon & {\n  type: '/cosmos.params.v1beta1.ParameterChangeProposal';\n};\n\nexport type ProposalInfo =\n  | SoftwareUpgradeProposal\n  | CoreEvalProposal\n  | ParameterChangeProposal;\n\nfunction readInfo(proposalPath: string): ProposalInfo {\n  assert(\n    proposalPath === proposalPath.toLowerCase(),\n    // because they go in Dockerfile target names\n    'proposal directories must be lowercase',\n  );\n  const packageJsonPath = path.join('proposals', proposalPath, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricProposal } = JSON.parse(packageJson);\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  assert(agoricProposal, 'missing agoricProposal in package.json');\n  const [proposalIdentifier, proposalName] = proposalPath.split(':');\n  return {\n    ...agoricProposal,\n    path: proposalPath,\n    proposalIdentifier,\n    proposalName,\n  };\n}\n\nexport function encodeUpgradeInfo(upgradeInfo: unknown): string {\n  return upgradeInfo != null ? JSON.stringify(upgradeInfo) : '';\n}\n\nexport function readProposals(proposalsParent: string): ProposalInfo[] {\n  const proposalsDir = path.join(proposalsParent, 'proposals');\n  const proposalPaths = fs\n    .readdirSync(proposalsDir, { withFileTypes: true })\n    .filter(dirent => {\n      assert('path' in dirent, 'missing path in dirent added in Node 18.17');\n      const hasPackageJson = fs.existsSync(\n        path.join(dirent.path, dirent.name, 'package.json'),\n      );\n      if (!hasPackageJson) {\n        console.warn(\n          'WARN ignoring non-package in proposal directory:',\n          dirent.name,\n        );\n      }\n      return hasPackageJson;\n    })\n    .map(dirent => dirent.name);\n  return proposalPaths.map(readInfo);\n}\n\nexport function imageNameForProposal(\n  proposal: Pick<ProposalCommon, 'proposalName'>,\n  stage: 'test' | 'use',\n) {\n  const target = `${stage}-${proposal.proposalName}`;\n  return {\n    name: `${repository}:${target}`,\n    target,\n  };\n}\n\nexport function isPassed(proposal: ProposalInfo) {\n  return proposal.proposalIdentifier.match(/^\\d/);\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { ProposalInfo } from './proposals.js';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\n\nconst fixupProposal = (proposal: ProposalInfo) => {\n  const proposalPath = path.join('proposals', proposal.path);\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join(proposalPath, 'package.json'), 'utf-8'),\n  );\n  if (packageJson.dependencies || packageJson.devDependencies) {\n    assert(\n      packageJson.packageManager,\n      'missing packageManager in package.json',\n    );\n    if (packageJson.packageManager.includes('yarn')) {\n      console.log('found \"yarn\" packageManager, processing...');\n      // ensure it has its own yarn.lock, to indicate this is a separate project\n      const yarnLock = path.join(proposalPath, 'yarn.lock');\n      if (!fs.existsSync(yarnLock)) {\n        console.log(`creating empty ${yarnLock}`);\n        fs.writeFileSync(yarnLock, '');\n      }\n\n      // default to node-modules linker\n      // (The pnpm linker has little benefit because hard links can't cross\n      // volumes so each Docker layer will have copies of the deps anyway. The\n      // pnp linker might work but requires other changes.)\n      const yarnRc = path.join(proposalPath, '.yarnrc.yml');\n      if (!fs.existsSync(yarnRc)) {\n        console.log(`creating ${yarnRc} with node-modules linker`);\n        fs.writeFileSync(yarnRc, 'nodeLinker: node-modules\\n');\n      }\n\n      // refresh install\n      execSync('rm -rf node_modules', { cwd: proposalPath });\n      execSync('yarn install', { cwd: proposalPath });\n    }\n  }\n};\n\nexport const runDoctor = (proposals: ProposalInfo[]) => {\n  console.log('Running doctor...');\n\n  console.log('enabling corepack');\n  execSync('corepack enable', { stdio: 'inherit' });\n\n  // path to yarn\n  const yarnpath = execSync('which yarn', {\n    encoding: 'utf-8',\n  });\n  if (yarnpath.includes('homebrew')) {\n    // Homebrew's yarn install overrides Node's corepack install\n    console.error(\n      'Homebrew installs of yarn are not supported. Use corepack instead:',\n    );\n    console.error('  brew uninstall yarn');\n    process.exit(1);\n  }\n  console.log(yarnpath);\n\n  console.log('Verifying the CLI runs and create the Dockerfiles');\n  execSync('yarn synthetic-chain prepare-build', { stdio: 'inherit' });\n\n  console.log(\n    'Verifying the install Docker Buildx is new enough to handle the Bake file',\n  );\n  try {\n    execSync('docker buildx bake --print');\n  } catch (e: any) {\n    console.error('Docker Buildx version is too old');\n    execSync('docker buildx version', { stdio: 'inherit' });\n    console.log(\n      'It must be at least 0.11. https://docs.docker.com/build/release-notes/#0110',\n    );\n    process.exit(1);\n  }\n\n  for (const proposal of proposals) {\n    try {\n      console.log('\\nchecking proposal', proposal.proposalName, '...');\n      fixupProposal(proposal);\n      console.log('passed');\n    } catch (e: any) {\n      console.error('message' in e ? e.message : e);\n      console.log('PROBLEM ^^^  After correcting, run doctor again.');\n    }\n  }\n};\n","import { execSync } from 'node:child_process';\nimport { ProposalInfo, imageNameForProposal } from './proposals.js';\n\nexport const runTestImage = (proposal: ProposalInfo) => {\n  console.log(`Running test image for proposal ${proposal.proposalName}`);\n  const { name } = imageNameForProposal(proposal, 'test');\n  // 'rm' to remove the container when it exits\n  const cmd = `docker run --rm ${name}`;\n  execSync(cmd, { stdio: 'inherit' });\n};\n\nexport const debugTestImage = (proposal: ProposalInfo) => {\n  const { name } = imageNameForProposal(proposal, 'test');\n  console.log(\n    `\n  Starting chain of test image for proposal ${proposal.proposalName}\n  \n  To get an interactive shell in the container, use an IDE feature like \"Attach Shell\" or this command:'\n  \n    docker exec -ti $(docker ps -q -f ancestor=${name}) bash\n  \n  And within that shell:\n    cd /usr/src/proposals/${proposal.path} && ./test.sh\n  \n  The 'proposals' path is mounted in the container so your edits will appear there.\n  `,\n  );\n\n  // start the chain, with the repo mounted at /usr/src\n  const cmd = `docker run --mount type=bind,src=./proposals,dst=/usr/src/proposals -it --entrypoint /usr/src/upgrade-test-scripts/start_agd.sh ${name}`;\n  execSync(cmd, { stdio: 'inherit' });\n};\n"],"mappings":";;;AAIA,OAAO,WAAW;AAClB,OAAOA,aAAY;AACnB,SAAS,YAAAC,iBAAgB;AACzB,OAAOC,WAAU;AACjB,SAAS,iBAAiB;;;ACR1B,SAAS,gBAAgB;AACzB,OAAO,QAAQ;AACf,OAAO,UAAU;AAejB,IAAM,gBAA4C;AAAA;AAAA;AAAA,EAGhD,SAAS;AACX;AAEO,SAAS,gBAAgBC,OAA0C;AACxE,QAAM,kBAAkB,KAAK,KAAKA,OAAM,cAAc;AACtD,QAAM,cAAc,GAAG,aAAa,iBAAiB,OAAO;AAC5D,QAAM,EAAE,qBAAqB,IAAI,KAAK,MAAM,WAAW;AAEvD,QAAM,SAAS,EAAE,GAAG,eAAe,GAAG,qBAAqB;AAE3D,SAAO;AACT;AAEO,IAAM,2BAA2B,CAACC,eAA8B;AACrE,aAAW,YAAYA,YAAW;AAChC,QAAI,EAAE,YAAY,YAAY,SAAS,WAAW;AAAU;AAE5D,YAAQ;AAAA,MACN;AAAA,MACA,SAAS;AAAA,MACT,SAAS;AAAA,IACX;AACA,UAAM,EAAE,YAAY,IAAI;AACxB,UAAM,eAAe,aAAa,IAAI;AACtC,UAAM,iBAAiB,GAAG,YAAY;AACtC,UAAM,sBAAsB,KAAK,SAAS,gBAAgB,WAAW;AAErE,aAAS,YAAY,cAAc,EAAE;AAErC,aAAS,cAAc,mBAAmB,IAAI;AAAA,MAC5C,KAAK;AAAA,MACL,KAAK,EAAE,GAAG,QAAQ,KAAK,MAAM,IAAI;AAAA,IACnC,CAAC;AAGD,UAAM,WAAW;AAAA,MACf,QAAQ,cAAc;AAAA,IACxB,EACG,SAAS,EACT,KAAK;AACR,UAAM,OAAO,KAAK,MAAM,GAAG,aAAa,UAAU,OAAO,CAAC;AAC1D,eAAW,EAAE,SAAS,KAAK,KAAK,SAAS;AAEvC,eAAS,MAAM,QAAQ,IAAI,cAAc,EAAE;AAE3C,eAAS,yBAAyB,cAAc,IAAI,QAAQ,EAAE;AAAA,IAChE;AAAA,EACF;AACF;AAYO,IAAM,aAAa,CAAC,QAAgB,MAAM,UAAU;AACzD,QAAMC,OAAM,6BAA6B,MAAM,IAAI,MAAM,YAAY,EAAE;AACvE,UAAQ,IAAIA,IAAG;AACf,WAASA,MAAK,EAAE,OAAO,UAAU,CAAC;AACpC;;;ACpFA,OAAOC,SAAQ;;;ACAf,OAAO,YAAY;AACnB,OAAOC,SAAQ;AACf,YAAYC,WAAU;AAEf,IAAM,aAAa;AAmC1B,SAAS,SAAS,cAAoC;AACpD;AAAA,IACE,iBAAiB,aAAa,YAAY;AAAA;AAAA,IAE1C;AAAA,EACF;AACA,QAAM,kBAAuB,WAAK,aAAa,cAAc,cAAc;AAC3E,QAAM,cAAcD,IAAG,aAAa,iBAAiB,OAAO;AAC5D,QAAM,EAAE,eAAe,IAAI,KAAK,MAAM,WAAW;AAEjD,SAAO,gBAAgB,wCAAwC;AAC/D,QAAM,CAAC,oBAAoB,YAAY,IAAI,aAAa,MAAM,GAAG;AACjE,SAAO;AAAA,IACL,GAAG;AAAA,IACH,MAAM;AAAA,IACN;AAAA,IACA;AAAA,EACF;AACF;AAEO,SAAS,kBAAkB,aAA8B;AAC9D,SAAO,eAAe,OAAO,KAAK,UAAU,WAAW,IAAI;AAC7D;AAEO,SAAS,cAAc,iBAAyC;AACrE,QAAM,eAAoB,WAAK,iBAAiB,WAAW;AAC3D,QAAM,gBAAgBA,IACnB,YAAY,cAAc,EAAE,eAAe,KAAK,CAAC,EACjD,OAAO,YAAU;AAChB,WAAO,UAAU,QAAQ,4CAA4C;AACrE,UAAM,iBAAiBA,IAAG;AAAA,MACnB,WAAK,OAAO,MAAM,OAAO,MAAM,cAAc;AAAA,IACpD;AACA,QAAI,CAAC,gBAAgB;AACnB,cAAQ;AAAA,QACN;AAAA,QACA,OAAO;AAAA,MACT;AAAA,IACF;AACA,WAAO;AAAA,EACT,CAAC,EACA,IAAI,YAAU,OAAO,IAAI;AAC5B,SAAO,cAAc,IAAI,QAAQ;AACnC;AAEO,SAAS,qBACd,UACAE,QACA;AACA,QAAM,SAAS,GAAGA,MAAK,IAAI,SAAS,YAAY;AAChD,SAAO;AAAA,IACL,MAAM,GAAG,UAAU,IAAI,MAAM;AAAA,IAC7B;AAAA,EACF;AACF;AAEO,SAAS,SAAS,UAAwB;AAC/C,SAAO,SAAS,mBAAmB,MAAM,KAAK;AAChD;;;ADlFA,IAAM,QAAQ;AAAA;AAAA;AAAA;AAAA,EAIZ,aAAa,cAAsB,IAAY;AAC7C,UAAM,gBAAgB;AACtB,WAAO;AAAA;AAAA,OAEJ,aAAa,qBAAqB,EAAE;AAAA,0BACjB,aAAa,eAAe,YAAY;AAAA,iBACjD,EAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,SAAiB;AACtB,WAAO;AAAA;AAAA,yCAE8B,OAAO,WAAW,OAAO;AAAA;AAAA,EAEhE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,QACE,EAAE,MAAAC,OAAM,UAAU,cAAc,YAAY,GAC5C,cACA;AACA,WAAO;AAAA,YACC,YAAY;AAAA;AAAA,iBAEP,QAAQ;AAAA,WACd,aAAa,YAAY,eAAe,YAAY;AAAA,iBAC9C,QAAQ,iBAAiB,KAAK;AAAA,MACzC,kBAAkB,WAAW;AAAA,IAC/B,CAAC;AAAA;AAAA,sCAEiCA,KAAI,uBAAuBA,KAAI;AAAA;AAAA;AAAA;AAAA,uBAI9CA,KAAI;AAAA;AAAA,EAEzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,QAAQ;AAAA,IACN,MAAAA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,EACF,GAA4B;AAC1B,WAAO;AAAA,YACC,YAAY;AAAA,iCACS,WAAW,eAAe,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA,sCAKjCA,KAAI,uBAAuBA,KAAI;AAAA;AAAA,8DAEPA,KAAI;AAAA;AAAA,6BAErC,YAAY;AAAA;AAAA;AAAA,uBAGlB,QAAQ;AAAA;AAAA,EAE7B;AAAA;AAAA;AAAA;AAAA;AAAA,EAKA,KACE,EAAE,MAAAA,OAAM,aAAa,GACrB,cACA;AACA,WAAO;AAAA,SACF,YAAY;AAAA,WACV,aAAa,YAAY,YAAY,YAAY;AAAA;AAAA,sCAEtBA,KAAI,uBAAuBA,KAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DAMPA,KAAI;AAAA;AAAA;AAAA;AAAA,oBAI9CA,KAAI;AAAA;AAAA,EAEtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,EAAE,MAAAA,OAAM,cAAc,KAAK,GAAiB;AAC9C,UAAM,gBACJ,SAAS,8BAA8B,YAAY;AACrD,WAAO;AAAA,QACH,YAAY;AAAA,OACb,aAAa,IAAI,YAAY,WAAW,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAMxCA,KAAI;AAAA;AAAA;AAAA,EAGrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,KAAK,EAAE,MAAAA,OAAM,aAAa,GAAiB;AACzC,WAAO;AAAA,SACF,YAAY;AAAA,WACV,YAAY,YAAY,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAMpBA,KAAI;AAAA;AAAA,EAE7B;AAAA;AAAA;AAAA;AAAA,EAIA,KAAK,cAA4B;AAK/B,UAAM,WAAW,qBAAqB,cAAc,KAAK,EAAE;AAC3D,WAAO;AAAA;AAAA,OAEJ,QAAQ;AAAA;AAAA,EAEb;AACF;AAEO,SAAS,uBACdC,eACA,WACA;AACA,QAAM,OAAO;AAAA,IACX,UAAU;AAAA,MACR,WAAW;AAAA,QACT,SAAS,aAAa;AAAA,MACxB;AAAA,MACA,WAAW;AAAA,QACT,SAASA,cAAa,IAAI,OAAK,EAAE,YAAY;AAAA,MAC/C;AAAA,IACF;AAAA,EACF;AACA,EAAAC,IAAG,cAAc,oBAAoB,KAAK,UAAU,MAAM,MAAM,CAAC,CAAC;AACpE;AAEO,SAAS,gBACdD,eACA,SACA;AAGA,QAAM,SAAmB,CAAC;AAE1B,MAAI,mBAAwC;AAG5C,MAAI,SAAS;AACX,WAAO,KAAK,MAAM,OAAO,OAAO,CAAC;AAEjC,uBAAmB;AAAA,MACjB,cAAc;AAAA,MACd,oBAAoB;AAAA;AAAA,MAEpB,MAAM;AAAA,MACN,MAAM;AAAA,MACN,QAAQ;AAAA,IACV;AAAA,EACF;AACA,aAAW,YAAYA,eAAc;AAEnC,WAAO;AAAA,MACL;AAAA,IAAwB,SAAS,YAAY;AAAA;AAAA,IAC/C;AAEA,YAAQ,SAAS,MAAM;AAAA,MACrB,KAAK;AAAA,MACL,KAAK;AACH,eAAO,KAAK,MAAM,KAAK,UAAU,gBAAiB,CAAC;AACnD;AAAA,MACF,KAAK;AAEH,YAAI,kBAAkB;AACpB,iBAAO,KAAK,MAAM,QAAQ,UAAU,gBAAgB,CAAC;AAAA,QACvD,OAAO;AACL,iBAAO;AAAA,YACL,MAAM,aAAa,SAAS,cAAc,SAAS,QAAQ;AAAA,UAC7D;AAAA,QACF;AACA,eAAO,KAAK,MAAM,QAAQ,QAAQ,CAAC;AACnC;AAAA,MACF;AAGE,cAAM,IAAI,MAAM,6BAA6B,SAAS,IAAI,EAAE;AAAA,IAChE;AAIA,WAAO,KAAK,MAAM,IAAI,QAAQ,CAAC;AAC/B,WAAO,KAAK,MAAM,KAAK,QAAQ,CAAC;AAChC,uBAAmB;AAAA,EACrB;AAEA,QAAM,aAAaA,cAAa,SAAS,QAAQ;AACjD,MAAI,YAAY;AACd,WAAO,KAAK,MAAM,KAAK,UAAU,CAAC;AAAA,EACpC;AAEA,QAAM,WAAW,OAAO,KAAK,IAAI;AACjC,EAAAC,IAAG,cAAc,cAAc,QAAQ;AACzC;;;AExQA,OAAOC,SAAQ;AACf,OAAOC,WAAU;AAEjB,OAAOC,aAAY;AACnB,SAAS,YAAAC,iBAAgB;AAEzB,IAAM,gBAAgB,CAAC,aAA2B;AAChD,QAAM,eAAeF,MAAK,KAAK,aAAa,SAAS,IAAI;AACzD,QAAM,cAAc,KAAK;AAAA,IACvBD,IAAG,aAAaC,MAAK,KAAK,cAAc,cAAc,GAAG,OAAO;AAAA,EAClE;AACA,MAAI,YAAY,gBAAgB,YAAY,iBAAiB;AAC3D,IAAAC;AAAA,MACE,YAAY;AAAA,MACZ;AAAA,IACF;AACA,QAAI,YAAY,eAAe,SAAS,MAAM,GAAG;AAC/C,cAAQ,IAAI,4CAA4C;AAExD,YAAM,WAAWD,MAAK,KAAK,cAAc,WAAW;AACpD,UAAI,CAACD,IAAG,WAAW,QAAQ,GAAG;AAC5B,gBAAQ,IAAI,kBAAkB,QAAQ,EAAE;AACxC,QAAAA,IAAG,cAAc,UAAU,EAAE;AAAA,MAC/B;AAMA,YAAM,SAASC,MAAK,KAAK,cAAc,aAAa;AACpD,UAAI,CAACD,IAAG,WAAW,MAAM,GAAG;AAC1B,gBAAQ,IAAI,YAAY,MAAM,2BAA2B;AACzD,QAAAA,IAAG,cAAc,QAAQ,4BAA4B;AAAA,MACvD;AAGA,MAAAG,UAAS,uBAAuB,EAAE,KAAK,aAAa,CAAC;AACrD,MAAAA,UAAS,gBAAgB,EAAE,KAAK,aAAa,CAAC;AAAA,IAChD;AAAA,EACF;AACF;AAEO,IAAM,YAAY,CAACC,eAA8B;AACtD,UAAQ,IAAI,mBAAmB;AAE/B,UAAQ,IAAI,mBAAmB;AAC/B,EAAAD,UAAS,mBAAmB,EAAE,OAAO,UAAU,CAAC;AAGhD,QAAM,WAAWA,UAAS,cAAc;AAAA,IACtC,UAAU;AAAA,EACZ,CAAC;AACD,MAAI,SAAS,SAAS,UAAU,GAAG;AAEjC,YAAQ;AAAA,MACN;AAAA,IACF;AACA,YAAQ,MAAM,uBAAuB;AACrC,YAAQ,KAAK,CAAC;AAAA,EAChB;AACA,UAAQ,IAAI,QAAQ;AAEpB,UAAQ,IAAI,mDAAmD;AAC/D,EAAAA,UAAS,sCAAsC,EAAE,OAAO,UAAU,CAAC;AAEnE,UAAQ;AAAA,IACN;AAAA,EACF;AACA,MAAI;AACF,IAAAA,UAAS,4BAA4B;AAAA,EACvC,SAAS,GAAQ;AACf,YAAQ,MAAM,kCAAkC;AAChD,IAAAA,UAAS,yBAAyB,EAAE,OAAO,UAAU,CAAC;AACtD,YAAQ;AAAA,MACN;AAAA,IACF;AACA,YAAQ,KAAK,CAAC;AAAA,EAChB;AAEA,aAAW,YAAYC,YAAW;AAChC,QAAI;AACF,cAAQ,IAAI,uBAAuB,SAAS,cAAc,KAAK;AAC/D,oBAAc,QAAQ;AACtB,cAAQ,IAAI,QAAQ;AAAA,IACtB,SAAS,GAAQ;AACf,cAAQ,MAAM,aAAa,IAAI,EAAE,UAAU,CAAC;AAC5C,cAAQ,IAAI,kDAAkD;AAAA,IAChE;AAAA,EACF;AACF;;;ACzFA,SAAS,YAAAC,iBAAgB;AAGlB,IAAM,eAAe,CAAC,aAA2B;AACtD,UAAQ,IAAI,mCAAmC,SAAS,YAAY,EAAE;AACtE,QAAM,EAAE,KAAK,IAAI,qBAAqB,UAAU,MAAM;AAEtD,QAAMC,OAAM,mBAAmB,IAAI;AACnC,EAAAC,UAASD,MAAK,EAAE,OAAO,UAAU,CAAC;AACpC;AAEO,IAAM,iBAAiB,CAAC,aAA2B;AACxD,QAAM,EAAE,KAAK,IAAI,qBAAqB,UAAU,MAAM;AACtD,UAAQ;AAAA,IACN;AAAA,8CAC0C,SAAS,YAAY;AAAA;AAAA;AAAA;AAAA,iDAIlB,IAAI;AAAA;AAAA;AAAA,4BAGzB,SAAS,IAAI;AAAA;AAAA;AAAA;AAAA,EAIvC;AAGA,QAAMA,OAAM,mIAAmI,IAAI;AACnJ,EAAAC,UAASD,MAAK,EAAE,OAAO,UAAU,CAAC;AACpC;;;ALZA,IAAM,EAAE,aAAa,OAAO,IAAI,UAAU;AAAA,EACxC,SAAS;AAAA,IACP,OAAO,EAAE,OAAO,KAAK,MAAM,SAAS;AAAA,IACpC,KAAK,EAAE,MAAM,UAAU;AAAA,IACvB,OAAO,EAAE,MAAM,UAAU;AAAA,EAC3B;AAAA,EACA,kBAAkB;AACpB,CAAC;AAED,IAAM,OAAOE,MAAK,QAAQ,GAAG;AAC7B,IAAM,cAAc,gBAAgB,IAAI;AACxC,IAAM,eAAe,cAAc,IAAI;AAEvC,IAAM,EAAE,MAAM,IAAI;AAClB,IAAM,YAAY,QACd,aAAa,OAAO,OAAK,EAAE,KAAK,SAAS,KAAK,CAAC,IAC/C;AAEJ,IAAM,CAAC,GAAG,IAAI;AAGd,IAAM,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWd,IAAM,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAY9B,IAAM,qBAAqB,MAAM;AAC/B,QAAM,UAAU,IAAI,IAAI,YAAY,GAAG,EAAE;AACzC,QAAM,YAAYA,MAAK,QAAQ,SAAS,MAAM,IAAI;AAElD,EAAAC,UAAS,SAASD,MAAK,QAAQ,WAAW,iBAAiB,CAAC,IAAI;AAChE,kBAAgB,cAAc,YAAY,OAAO;AACjD,yBAAuB,cAAc,YAAY,SAAS;AAE1D,EAAAC,UAAS,SAASD,MAAK,QAAQ,WAAW,sBAAsB,CAAC,IAAI;AACrE,2BAAyB,SAAS;AAGlC,EAAAC;AAAA,IACE;AAAA,EACF;AACF;AAEA,QAAQ,KAAK;AAAA,EACX,KAAK;AACH,uBAAmB;AACnB;AAAA,EACF,KAAK,SAAS;AACZ,uBAAmB;AAEnB,QAAI,YAAY,WAAW;AACzB,cAAQ,MAAM,qBAAqB;AACnC,cAAQ,KAAK,CAAC;AAAA,IAChB;AACA,eAAW,OAAO,OAAO,GAAG;AAC5B;AAAA,EACF;AAAA,EACA,KAAK;AAGH,uBAAmB;AAEnB,QAAI,OAAO,OAAO;AAChB,MAAAC,QAAO,OAAO,qBAAqB;AACnC,MAAAA,QAAO,UAAU,SAAS,GAAG,oBAAoB;AACjD,MAAAA,QAAO,UAAU,WAAW,GAAG,0BAA0B;AACzD,YAAM,WAAW,UAAU,CAAC;AAC5B,cAAQ,IAAI,MAAM,OAAO,KAAK,aAAa,SAAS,YAAY,EAAE,CAAC;AACnE,iBAAW,qBAAqB,UAAU,MAAM,EAAE,QAAQ,OAAO,GAAG;AACpE,qBAAe,QAAQ;AAAA,IAGzB,OAAO;AACL,iBAAW,YAAY,WAAW;AAChC,gBAAQ,IAAI,MAAM,KAAK,KAAK,WAAW,SAAS,YAAY,EAAE,CAAC;AAC/D,cAAM,QAAQ,qBAAqB,UAAU,MAAM;AACnD,mBAAW,MAAM,QAAQ,OAAO,GAAG;AACnC,qBAAa,QAAQ;AAGrB,QAAAD,UAAS,oBAAoB,EAAE,OAAO,UAAU,CAAC;AACjD,QAAAA,UAAS,cAAc,MAAM,IAAI,IAAI,EAAE,OAAO,UAAU,CAAC;AACzD,QAAAA,UAAS,oBAAoB,EAAE,OAAO,UAAU,CAAC;AAAA,MACnD;AAAA,IACF;AACA;AAAA,EACF,KAAK;AACH,cAAU,YAAY;AACtB;AAAA,EACF;AACE,YAAQ,IAAI,KAAK;AACrB;","names":["assert","execSync","path","root","proposals","cmd","fs","fs","path","stage","path","allProposals","fs","fs","path","assert","execSync","proposals","execSync","cmd","execSync","path","execSync","assert"]}
\ No newline at end of file
+{"version":3,"sources":["../../src/cli/cli.ts","../../src/cli/build.ts","../../src/cli/dockerfileGen.ts","../../src/cli/proposals.ts","../../src/cli/doctor.ts","../../src/cli/run.ts"],"sourcesContent":["#!/usr/bin/env node\n/**\n * @file CLI entrypoint, transpiled during build so Node is the env to run it in\n */\nimport chalk from 'chalk';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\nimport path from 'node:path';\nimport { parseArgs } from 'node:util';\nimport {\n  bakeTarget,\n  buildProposalSubmissions,\n  readBuildConfig,\n} from './build.js';\nimport { writeBakefileProposals, writeDockerfile } from './dockerfileGen.js';\nimport { runDoctor } from './doctor.js';\nimport { imageNameForProposal, readProposals } from './proposals.js';\nimport { debugTestImage, runTestImage } from './run.js';\n\nconst { positionals, values } = parseArgs({\n  options: {\n    match: { short: 'm', type: 'string' },\n    dry: { type: 'boolean' },\n    debug: { type: 'boolean' },\n  },\n  allowPositionals: true,\n});\n\nconst root = path.resolve('.');\nconst buildConfig = readBuildConfig(root);\nconst allProposals = readProposals(root);\n\nconst { match } = values;\nconst proposals = match\n  ? allProposals.filter(p => p.path.includes(match))\n  : allProposals;\n\nconst [cmd] = positionals;\n\n// TODO consider a lib like Commander for auto-gen help\nconst USAGE = `USAGE:\nprepare-build   - generate Docker build configs\n\nbuild           - build the synthetic-chain \"use\" images\n\ntest [--debug]  - build the \"test\" images and run them\ntest -m <name>  - target a particular proposal by substring match\n\ndoctor          - diagnostics and quick fixes\n`;\n\nconst EXPLAIN_MULTIPLATFORM = `\nERROR: docker exporter does not currently support exporting manifest lists\n\nMultiple platforms are configured but Docker does not support multiplatform in one builder.\nUntil https://github.com/docker/roadmap/issues/371, attempting it will error as above.\n\nInstead use a builder that supports multiplatform such as depot.dev.\n`;\n\n/**\n * Put into places files that building depends upon.\n */\nconst prepareDockerBuild = () => {\n  const cliPath = new URL(import.meta.url).pathname;\n  const publicDir = path.resolve(cliPath, '..', '..');\n  // copy and generate files of the build context that aren't in the build contents\n  execSync(`cp -r ${path.resolve(publicDir, 'docker-bake.hcl')} .`);\n  writeDockerfile(allProposals, buildConfig.fromTag);\n  writeBakefileProposals(allProposals, buildConfig.platforms);\n  // copy and generate files to include in the build\n  execSync(`cp -r ${path.resolve(publicDir, 'upgrade-test-scripts')} .`);\n  buildProposalSubmissions(proposals);\n  // set timestamp of build content to zero to avoid invalidating the build cache\n  // (change in contents will still invalidate)\n  execSync(\n    'find upgrade-test-scripts -type f -exec touch -t 197001010000 {} +',\n  );\n};\n\nswitch (cmd) {\n  case 'prepare-build':\n    prepareDockerBuild();\n    break;\n  case 'build': {\n    prepareDockerBuild();\n    // do not encapsulate running Depot. It's a special case which the user should understand.\n    if (buildConfig.platforms) {\n      console.error(EXPLAIN_MULTIPLATFORM);\n      process.exit(1);\n    }\n    bakeTarget('use', values.dry);\n    break;\n  }\n  case 'test':\n    // Always rebuild all test images to keep it simple. With the \"use\" stages\n    // cached, these are pretty fast building doesn't run agd.\n    prepareDockerBuild();\n\n    if (values.debug) {\n      assert(match, '--debug requires -m');\n      assert(proposals.length > 0, 'no proposals match');\n      assert(proposals.length === 1, 'too many proposals match');\n      const proposal = proposals[0];\n      console.log(chalk.yellow.bold(`Debugging ${proposal.proposalName}`));\n      bakeTarget(imageNameForProposal(proposal, 'test').target, values.dry);\n      debugTestImage(proposal);\n      // don't bother to delete the test image because there's just one\n      // and the user probably wants to run it again.\n    } else {\n      for (const proposal of proposals) {\n        console.log(chalk.cyan.bold(`Testing ${proposal.proposalName}`));\n        const image = imageNameForProposal(proposal, 'test');\n        bakeTarget(image.target, values.dry);\n        runTestImage(proposal);\n        // delete the image to reclaim disk space. The next build\n        // will use the build cache.\n        execSync('docker system df', { stdio: 'inherit' });\n        execSync(`docker rmi ${image.name}`, { stdio: 'inherit' });\n        execSync('docker system df', { stdio: 'inherit' });\n      }\n    }\n    break;\n  case 'doctor':\n    runDoctor(allProposals);\n    break;\n  default:\n    console.log(USAGE);\n}\n","import { execSync } from 'node:child_process';\nimport fs from 'node:fs';\nimport path from 'node:path';\nimport { ProposalInfo } from './proposals.js';\n\nexport type Platform = 'linux/amd64' | 'linux/arm64';\n\nexport type AgoricSyntheticChainConfig = {\n  /**\n   * The agoric-3-proposals tag to build the agoric synthetic chain from.\n   * If `null`, the chain is built from an ag0 genesis.\n   * Defaults to `latest`, which containing all passed proposals\n   */\n  fromTag: string | null;\n  platforms?: Platform[];\n};\n\nconst defaultConfig: AgoricSyntheticChainConfig = {\n  // Tag of the agoric-3 image containing all passed proposals\n  // Must match the Bake file and CI config\n  fromTag: 'latest',\n};\n\nexport function readBuildConfig(root: string): AgoricSyntheticChainConfig {\n  const packageJsonPath = path.join(root, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricSyntheticChain } = JSON.parse(packageJson);\n\n  const config = { ...defaultConfig, ...agoricSyntheticChain };\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  return config;\n}\n\nexport const buildProposalSubmissions = (proposals: ProposalInfo[]) => {\n  for (const proposal of proposals) {\n    if (!('source' in proposal && proposal.source === 'build')) continue;\n\n    console.log(\n      'Refreshing submission for',\n      proposal.proposalIdentifier,\n      proposal.proposalName,\n    );\n    const { buildScript } = proposal;\n    const proposalPath = `proposals/${path}`;\n    const submissionPath = `${proposalPath}/submission`;\n    const relativeBuildScript = path.relative(submissionPath, buildScript);\n\n    execSync(`mkdir -p ${submissionPath}`);\n    // Generate files only in submission path.\n    execSync(`agoric run ${relativeBuildScript}`, {\n      cwd: submissionPath,\n      env: { ...process.env, HOME: '.' },\n    });\n    // find the one file ending in -plan.json\n    // TODO error if there is more than one\n    const planPath = execSync(\n      `find ${submissionPath} -maxdepth 1 -type f -name '*-plan.json'`,\n    )\n      .toString()\n      .trim();\n    const plan = JSON.parse(fs.readFileSync(planPath, 'utf-8'));\n    for (const { fileName } of plan.bundles) {\n      // Copy the bundle into the submission path.\n      execSync(`cp ${fileName} ${submissionPath}`);\n      // Set timestamp to zero to avoid invalidating the build cache\n      execSync(`touch -t 197001010000 ${submissionPath}/${fileName}`);\n    }\n  }\n};\n\n/**\n * Bake images using the docker buildx bake command.\n *\n * Note this uses `--load` which pushes the completed images to the builder,\n * consuming 2-3 GB per image.\n * @see {@link https://docs.docker.com/engine/reference/commandline/buildx_build/#load}\n *\n * @param target - The image or group target\n * @param [dry] - Whether to skip building and just print the build config.\n */\nexport const bakeTarget = (target: string, dry = false) => {\n  const cmd = `docker buildx bake --load ${target} ${dry ? '--print' : ''}`;\n  console.log(cmd);\n  execSync(cmd, { stdio: 'inherit' });\n};\n","import fs from 'node:fs';\nimport {\n  type CoreEvalProposal,\n  type ProposalInfo,\n  type SoftwareUpgradeProposal,\n  encodeUpgradeInfo,\n  imageNameForProposal,\n  isPassed,\n  ParameterChangeProposal,\n} from './proposals.js';\nimport { Platform } from './build.js';\n\n/**\n * Templates for Dockerfile stages\n */\nconst stage = {\n  /**\n   * Prepare an upgrade from ag0, start of the chain\n   */\n  PREPARE_ZERO(proposalName: string, to: string) {\n    const agZeroUpgrade = 'agoric-upgrade-7-2';\n    return `\n## START\n# on ${agZeroUpgrade}, with upgrade to ${to}\nFROM ghcr.io/agoric/ag0:${agZeroUpgrade} as prepare-${proposalName}\nENV UPGRADE_TO=${to}\n\n# put env functions into shell environment\nRUN echo '. /usr/src/upgrade-test-scripts/env_setup.sh' >> ~/.bashrc\n\n# copy scripts\nCOPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_prepare_zero.sh /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\n# this is the only layer that starts ag0\nRUN /usr/src/upgrade-test-scripts/run_prepare_zero.sh\n`;\n  },\n  /**\n   * Resume from state of an existing image.\n   * Creates a \"use\" stage upon which a PREPARE or EVAL can stack.\n   */\n  RESUME(fromTag: string) {\n    return `\n## RESUME\nFROM ghcr.io/agoric/agoric-3-proposals:${fromTag} as use-${fromTag}\n`;\n  },\n\n  /**\n   * Prepare an upgrade handler to run.\n   *\n   * - Submit the software-upgrade proposal for planName and run until upgradeHeight, leaving the state-dir ready for next agd.\n   */\n  PREPARE(\n    {\n      path,\n      planName,\n      proposalName,\n      upgradeInfo,\n      releaseNotes,\n    }: SoftwareUpgradeProposal,\n    lastProposal: ProposalInfo,\n  ) {\n    return `\n# PREPARE ${proposalName}\n\n# upgrading to ${planName}\nFROM use-${lastProposal.proposalName} as prepare-${proposalName}\nENV UPGRADE_TO=${planName} UPGRADE_INFO=${JSON.stringify(\n      encodeUpgradeInfo(upgradeInfo),\n    )} VALIDATE_UPGRADE_INFO=${!!releaseNotes}\n\nCOPY --link --chmod=755 ./proposals/${path} /usr/src/proposals/${path}\nCOPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_prepare.sh ./upgrade-test-scripts/start_to_to.sh /usr/src/upgrade-test-scripts/\nWORKDIR /usr/src/upgrade-test-scripts\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_prepare.sh ${path}\n`;\n  },\n  /**\n   * Execute a prepared upgrade.\n   * - Start agd with the SDK that has the upgradeHandler\n   * - Run any core-evals associated with the proposal (either the ones specified in prepare, or straight from the proposal)\n   */\n  EXECUTE({\n    path,\n    planName,\n    proposalName,\n    sdkImageTag,\n  }: SoftwareUpgradeProposal) {\n    return `\n# EXECUTE ${proposalName}\nFROM ghcr.io/agoric/agoric-sdk:${sdkImageTag} as execute-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# base is a fresh sdk image so set up the proposal and its dependencies\nCOPY --link --chmod=755 ./proposals/${path} /usr/src/proposals/${path}\nCOPY --link --chmod=755 ./upgrade-test-scripts/env_setup.sh ./upgrade-test-scripts/run_execute.sh  ./upgrade-test-scripts/start_to_to.sh ./upgrade-test-scripts/install_deps.sh /usr/src/upgrade-test-scripts/\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\nCOPY --link --from=prepare-${proposalName} /root/.agoric /root/.agoric\n\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_execute.sh ${planName}\n`;\n  },\n  /**\n   * Run a core-eval proposal\n   * - Run the core-eval scripts from the proposal. They are only guaranteed to have started, not completed.\n   */\n  EVAL(\n    { path, proposalName }: CoreEvalProposal | ParameterChangeProposal,\n    lastProposal: ProposalInfo,\n  ) {\n    return `\n# EVAL ${proposalName}\nFROM use-${lastProposal.proposalName} as eval-${proposalName}\n\nCOPY --link --chmod=755 ./proposals/${path} /usr/src/proposals/${path}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\n# First stage of this proposal so install its deps.\nCOPY --link ./upgrade-test-scripts/install_deps.sh /usr/src/upgrade-test-scripts/\nRUN --mount=type=cache,target=/root/.yarn ./install_deps.sh ${path}\n\nCOPY --link --chmod=755 ./upgrade-test-scripts/*eval* /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_eval.sh ${path}\n`;\n  },\n  /**\n   * Use the proposal\n   *\n   * - Perform any mutations that should be part of chain history\n   */\n  USE({ path, proposalName, type }: ProposalInfo) {\n    const previousStage =\n      type === 'Software Upgrade Proposal' ? 'execute' : 'eval';\n    return `\n# USE ${proposalName}\nFROM ${previousStage}-${proposalName} as use-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\nCOPY --link --chmod=755 ./upgrade-test-scripts/run_use.sh ./upgrade-test-scripts/start_agd.sh /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\nRUN ./run_use.sh ${path}\nENTRYPOINT ./start_agd.sh\n`;\n  },\n  /**\n   * Generate image than can test the proposal\n   *\n   * - Run with the image of the last \"use\"\n   * - Run tests of the proposal\n   *\n   * Needs to be an image to have access to the SwingSet db. run it with `docker run --rm` to not make the container ephemeral.\n   */\n  TEST({ path, proposalName }: ProposalInfo) {\n    return `\n# TEST ${proposalName}\nFROM use-${proposalName} as test-${proposalName}\n\nWORKDIR /usr/src/upgrade-test-scripts\n\nCOPY --link --chmod=755 ./upgrade-test-scripts/run_test.sh /usr/src/upgrade-test-scripts/\nSHELL [\"/bin/bash\", \"-c\"]\nENTRYPOINT ./run_test.sh ${path}\n`;\n  },\n  /**\n   * The last target in the file, for untargeted `docker build`\n   */\n  LAST(lastProposal: ProposalInfo) {\n    // Assumes the 'use' image is built and tagged.\n    // This isn't necessary for a multi-stage build, but without it CI\n    // rebuilds the last \"use\" image during the \"default\" image step\n    // Some background: https://github.com/moby/moby/issues/34715\n    const useImage = imageNameForProposal(lastProposal, 'use').name;\n    return `\n# LAST\nFROM ${useImage} as latest\n`;\n  },\n};\n\nexport function writeBakefileProposals(\n  allProposals: ProposalInfo[],\n  platforms?: Platform[],\n) {\n  const json = {\n    variable: {\n      PLATFORMS: {\n        default: platforms || null,\n      },\n      PROPOSALS: {\n        default: allProposals.map(p => p.proposalName),\n      },\n    },\n  };\n  fs.writeFileSync('docker-bake.json', JSON.stringify(json, null, 2));\n}\n\nexport function writeDockerfile(\n  allProposals: ProposalInfo[],\n  fromTag?: string | null,\n) {\n  // Each stage tests something about the left argument and prepare an upgrade to the right side (by passing the proposal and halting the chain.)\n  // The upgrade doesn't happen until the next stage begins executing.\n  const blocks: string[] = ['# syntax=docker/dockerfile:1.4'];\n\n  let previousProposal: ProposalInfo | null = null;\n\n  // appending to a previous image, so set up the 'use' stage\n  if (fromTag) {\n    blocks.push(stage.RESUME(fromTag));\n    // define a previous proposal that matches what later stages expect\n    previousProposal = {\n      proposalName: fromTag,\n      proposalIdentifier: fromTag,\n      // XXX these are bogus\n      path: 'VIRTUAL',\n      type: '/agoric.swingset.CoreEvalProposal',\n      source: 'subdir',\n    };\n  }\n  for (const proposal of allProposals) {\n    // UNTIL region support https://github.com/microsoft/vscode-docker/issues/230\n    blocks.push(\n      `#----------------\\n# ${proposal.proposalName}\\n#----------------`,\n    );\n\n    switch (proposal.type) {\n      case '/agoric.swingset.CoreEvalProposal':\n      case '/cosmos.params.v1beta1.ParameterChangeProposal':\n        blocks.push(stage.EVAL(proposal, previousProposal!));\n        break;\n      case 'Software Upgrade Proposal':\n        // handle the first proposal specially\n        if (previousProposal) {\n          blocks.push(stage.PREPARE(proposal, previousProposal));\n        } else {\n          blocks.push(\n            stage.PREPARE_ZERO(proposal.proposalName, proposal.planName),\n          );\n        }\n        blocks.push(stage.EXECUTE(proposal));\n        break;\n      default:\n        // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n        // @ts-expect-error exhaustive switch narrowed type to `never`\n        throw new Error(`unsupported proposal type ${proposal.type}`);\n    }\n\n    // The stages must be output in dependency order because if the builder finds a FROM\n    // that it hasn't built yet, it will search for it in the registry. But it won't be there!\n    blocks.push(stage.USE(proposal));\n    blocks.push(stage.TEST(proposal));\n    previousProposal = proposal;\n  }\n  // If one of the proposals is a passed proposal, make the latest one the default entrypoint\n  const lastPassed = allProposals.findLast(isPassed);\n  if (lastPassed) {\n    blocks.push(stage.LAST(lastPassed));\n  }\n\n  const contents = blocks.join('\\n');\n  fs.writeFileSync('Dockerfile', contents);\n}\n","import assert from 'node:assert';\nimport fs from 'node:fs';\nimport * as path from 'node:path';\n\nexport const repository = 'ghcr.io/agoric/agoric-3-proposals';\n\ntype ProposalCommon = {\n  path: string; // in the proposals directory\n  proposalName: string;\n  proposalIdentifier: string;\n};\n\nexport type SoftwareUpgradeProposal = ProposalCommon & {\n  sdkImageTag: string;\n  planName: string;\n  upgradeInfo?: unknown;\n  releaseNotes: string | false;\n  type: 'Software Upgrade Proposal';\n};\n\nexport type CoreEvalProposal = ProposalCommon & {\n  type: '/agoric.swingset.CoreEvalProposal';\n} & (\n    | { source: 'build'; buildScript: string }\n    | {\n        // default behavior\n        source: 'subdir';\n      }\n  );\n\nexport type ParameterChangeProposal = ProposalCommon & {\n  type: '/cosmos.params.v1beta1.ParameterChangeProposal';\n};\n\nexport type ProposalInfo =\n  | SoftwareUpgradeProposal\n  | CoreEvalProposal\n  | ParameterChangeProposal;\n\nfunction readInfo(proposalPath: string): ProposalInfo {\n  assert(\n    proposalPath === proposalPath.toLowerCase(),\n    // because they go in Dockerfile target names\n    'proposal directories must be lowercase',\n  );\n  const packageJsonPath = path.join('proposals', proposalPath, 'package.json');\n  const packageJson = fs.readFileSync(packageJsonPath, 'utf-8');\n  const { agoricProposal } = JSON.parse(packageJson);\n  // UNTIL https://github.com/Agoric/agoric-3-proposals/issues/77\n  assert(agoricProposal, 'missing agoricProposal in package.json');\n  const [proposalIdentifier, proposalName] = proposalPath.split(':');\n  return {\n    ...agoricProposal,\n    path: proposalPath,\n    proposalIdentifier,\n    proposalName,\n  };\n}\n\nexport function encodeUpgradeInfo(upgradeInfo: unknown): string {\n  return upgradeInfo != null ? JSON.stringify(upgradeInfo) : '';\n}\n\nexport function readProposals(proposalsParent: string): ProposalInfo[] {\n  const proposalsDir = path.join(proposalsParent, 'proposals');\n  const proposalPaths = fs\n    .readdirSync(proposalsDir, { withFileTypes: true })\n    .filter(dirent => {\n      assert('path' in dirent, 'missing path in dirent added in Node 18.17');\n      const hasPackageJson = fs.existsSync(\n        path.join(dirent.path, dirent.name, 'package.json'),\n      );\n      if (!hasPackageJson) {\n        console.warn(\n          'WARN ignoring non-package in proposal directory:',\n          dirent.name,\n        );\n      }\n      return hasPackageJson;\n    })\n    .map(dirent => dirent.name);\n  return proposalPaths.map(readInfo);\n}\n\nexport function imageNameForProposal(\n  proposal: Pick<ProposalCommon, 'proposalName'>,\n  stage: 'test' | 'use',\n) {\n  const target = `${stage}-${proposal.proposalName}`;\n  return {\n    name: `${repository}:${target}`,\n    target,\n  };\n}\n\nexport function isPassed(proposal: ProposalInfo) {\n  return proposal.proposalIdentifier.match(/^\\d/);\n}\n","import fs from 'node:fs';\nimport path from 'node:path';\nimport { ProposalInfo } from './proposals.js';\nimport assert from 'node:assert';\nimport { execSync } from 'node:child_process';\n\nconst fixupProposal = (proposal: ProposalInfo) => {\n  const proposalPath = path.join('proposals', proposal.path);\n  const packageJson = JSON.parse(\n    fs.readFileSync(path.join(proposalPath, 'package.json'), 'utf-8'),\n  );\n  if (packageJson.dependencies || packageJson.devDependencies) {\n    assert(\n      packageJson.packageManager,\n      'missing packageManager in package.json',\n    );\n    if (packageJson.packageManager.includes('yarn')) {\n      console.log('found \"yarn\" packageManager, processing...');\n      // ensure it has its own yarn.lock, to indicate this is a separate project\n      const yarnLock = path.join(proposalPath, 'yarn.lock');\n      if (!fs.existsSync(yarnLock)) {\n        console.log(`creating empty ${yarnLock}`);\n        fs.writeFileSync(yarnLock, '');\n      }\n\n      // default to node-modules linker\n      // (The pnpm linker has little benefit because hard links can't cross\n      // volumes so each Docker layer will have copies of the deps anyway. The\n      // pnp linker might work but requires other changes.)\n      const yarnRc = path.join(proposalPath, '.yarnrc.yml');\n      if (!fs.existsSync(yarnRc)) {\n        console.log(`creating ${yarnRc} with node-modules linker`);\n        fs.writeFileSync(yarnRc, 'nodeLinker: node-modules\\n');\n      }\n\n      // refresh install\n      execSync('rm -rf node_modules', { cwd: proposalPath });\n      execSync('yarn install', { cwd: proposalPath });\n    }\n  }\n};\n\nexport const runDoctor = (proposals: ProposalInfo[]) => {\n  console.log('Running doctor...');\n\n  console.log('enabling corepack');\n  execSync('corepack enable', { stdio: 'inherit' });\n\n  // path to yarn\n  const yarnpath = execSync('which yarn', {\n    encoding: 'utf-8',\n  });\n  if (yarnpath.includes('homebrew')) {\n    // Homebrew's yarn install overrides Node's corepack install\n    console.error(\n      'Homebrew installs of yarn are not supported. Use corepack instead:',\n    );\n    console.error('  brew uninstall yarn');\n    process.exit(1);\n  }\n  console.log(yarnpath);\n\n  console.log('Verifying the CLI runs and create the Dockerfiles');\n  execSync('yarn synthetic-chain prepare-build', { stdio: 'inherit' });\n\n  console.log(\n    'Verifying the install Docker Buildx is new enough to handle the Bake file',\n  );\n  try {\n    execSync('docker buildx bake --print');\n  } catch (e: any) {\n    console.error('Docker Buildx version is too old');\n    execSync('docker buildx version', { stdio: 'inherit' });\n    console.log(\n      'It must be at least 0.11. https://docs.docker.com/build/release-notes/#0110',\n    );\n    process.exit(1);\n  }\n\n  for (const proposal of proposals) {\n    try {\n      console.log('\\nchecking proposal', proposal.proposalName, '...');\n      fixupProposal(proposal);\n      console.log('passed');\n    } catch (e: any) {\n      console.error('message' in e ? e.message : e);\n      console.log('PROBLEM ^^^  After correcting, run doctor again.');\n    }\n  }\n};\n","import { execSync } from 'node:child_process';\nimport { ProposalInfo, imageNameForProposal } from './proposals.js';\n\nexport const runTestImage = (proposal: ProposalInfo) => {\n  console.log(`Running test image for proposal ${proposal.proposalName}`);\n  const { name } = imageNameForProposal(proposal, 'test');\n  // 'rm' to remove the container when it exits\n  const cmd = `docker run --rm ${name}`;\n  execSync(cmd, { stdio: 'inherit' });\n};\n\nexport const debugTestImage = (proposal: ProposalInfo) => {\n  const { name } = imageNameForProposal(proposal, 'test');\n  console.log(\n    `\n  Starting chain of test image for proposal ${proposal.proposalName}\n  \n  To get an interactive shell in the container, use an IDE feature like \"Attach Shell\" or this command:'\n  \n    docker exec -ti $(docker ps -q -f ancestor=${name}) bash\n  \n  And within that shell:\n    cd /usr/src/proposals/${proposal.path} && ./test.sh\n  \n  The 'proposals' path is mounted in the container so your edits will appear there.\n  `,\n  );\n\n  // start the chain, with the repo mounted at /usr/src\n  const cmd = `docker run --mount type=bind,src=./proposals,dst=/usr/src/proposals -it --entrypoint /usr/src/upgrade-test-scripts/start_agd.sh ${name}`;\n  execSync(cmd, { stdio: 'inherit' });\n};\n"],"mappings":"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","names":["assert","execSync","path","root","proposals","cmd","fs","fs","path","stage","path","allProposals","fs","fs","path","assert","execSync","proposals","execSync","cmd","execSync","path","execSync","assert"]}
\ No newline at end of file
diff --git a/dist/upgrade-test-scripts/run_prepare.sh b/dist/upgrade-test-scripts/run_prepare.sh
index d615b7e90b52cbd3d0b9489d55cba28094e5e71b..706bec4e3ca49f144ee5a34347ff8e781b715c6c 100755
--- a/dist/upgrade-test-scripts/run_prepare.sh
+++ b/dist/upgrade-test-scripts/run_prepare.sh
@@ -54,9 +54,13 @@ else
   echo "Upgrade info is not valid JSON: $info"
   exit $status
 fi
+validate=""
+if [ "$VALIDATE_UPGRADE_INFO" = "false" ]; then
+  validate="--no-validate"
+fi
 # shellcheck disable=SC2086
 agd tx gov submit-proposal software-upgrade "$UPGRADE_TO" \
-  --upgrade-height="$height" --upgrade-info="$info" \
+  --upgrade-height="$height" --upgrade-info="$info" $validate \
   --title="Upgrade to ${UPGRADE_TO}" --description="upgrades" \
   ${SIGN_BROADCAST_OPTS="--missing-env-setup"}
 waitForBlock
