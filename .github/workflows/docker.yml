name: Build release Docker Images

on:
  push:
    tags:
      - "@agoric/sdk@*"
  schedule:
      # Build daily images.
    - cron: "0 0 * * *"

jobs:
  docker-sdk:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Save Git revision
      run: echo "GIT_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
    - name: Save GIT_COMMIT
      run: echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
    - name: Save SDK_VERSION
      run: echo "SDK_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
    - name: Save commit hash, url of submodules to environment
      run: |
        node packages/xsnap/src/build.js --show-env >> $GITHUB_ENV
    - name: Save Docker tag
      run: echo "DOCKER_TAG=,$SDK_VERSION" >> $GITHUB_ENV
      if: ${{ github.event_name == 'push' }}
    - name: Build SDK image
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        name: agoric/agoric-sdk
        dockerfile: packages/deployment/Dockerfile.sdk
        # When changing/adding entries here, make sure to search the whole
        # project for `@@AGORIC_DOCKER_SUBMODULES@@`
        buildargs: GIT_COMMIT,MODDABLE_COMMIT_HASH,MODDABLE_URL,XSNAP_NATIVE_COMMIT_HASH,XSNAP_NATIVE_URL,GIT_REVISION
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        snapshot: true
        tags: "latest${{ env.DOCKER_TAG }}"

  # This is currently needed for the relayer integration test framework.
  # It just runs agoric/agoric-sdk with a "single-node" argument.
  docker-ibc-alpha:
    needs: docker-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Save SDK_VERSION
      run: echo "SDK_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
    - name: Build ibc-alpha image
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        name: agoric/agoric-sdk
        dockerfile: packages/deployment/Dockerfile.ibc-alpha
        context: packages/deployment/docker
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        tags: "ibc-alpha"

  docker-solo:
    needs: docker-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Save SDK_VERSION
      run: echo "SDK_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
    - name: Save Docker tag
      run: echo "DOCKER_TAG=,$SDK_VERSION" >> $GITHUB_ENV
      if: ${{ github.event_name == 'push' }}
    - name: Build ag-solo image
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        name: agoric/cosmic-swingset-solo
        dockerfile: packages/solo/Dockerfile
        context: packages/solo
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        snapshot: true
        tags: "latest${{ env.DOCKER_TAG }}"

  docker-setup:
    needs: docker-sdk
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Save SDK_VERSION
      run: echo "SDK_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
    - name: Save Docker tag
      run: echo "DOCKER_TAG=,$SDK_VERSION" >> $GITHUB_ENV
      if: ${{ github.event_name == 'push' }}
    - name: Build setup image
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        name: agoric/cosmic-swingset-setup
        dockerfile: packages/deployment/Dockerfile
        context: packages/deployment
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        snapshot: true
        tags: "latest${{ env.DOCKER_TAG }}"

  docker-deployment:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Save SDK_VERSION
      run: echo "SDK_VERSION=$(jq -r .version package.json)" >> $GITHUB_ENV
    - name: Save Docker tag
      run: echo "DOCKER_TAG=,$SDK_VERSION" >> $GITHUB_ENV
      if: ${{ github.event_name == 'push' }}
    - name: Build setup image
      uses: elgohr/Publish-Docker-Github-Action@3.04
      with:
        name: agoric/deployment
        dockerfile: packages/deployment/Dockerfile.deployment
        context: packages/deployment/docker
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        snapshot: true
        tags: "latest${{ env.DOCKER_TAG }}"
