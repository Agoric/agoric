name: Build release Docker Images

on:
  push:
    branches: [master] # $default-branch
    tags:
      - '@agoric/sdk@*'
    workflow_dispatch:

jobs:
  snapshot:
    runs-on: ubuntu-latest
    outputs:
      tag: '${{ steps.snapshot-tag.outputs.tag }}'
    steps:
      - name: Generate Snapshot Tag
        id: snapshot-tag
        run: |
          TIMESTAMP=`date +%Y%m%d%H%M%S`
          SHORT_SHA=$(echo "${GITHUB_SHA}" | cut -c1-6)
          SNAPSHOT_TAG="${TIMESTAMP}${SHORT_SHA}"
          echo "::set-output name=tag::$SNAPSHOT_TAG"

  docker-sdk:
    needs: snapshot
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform:
          - linux/amd64
          - linux/arm64/v8
    outputs:
      tag: '${{ steps.docker-tags.outputs.tags }}'
      tags: '${{ steps.docker-tags.outputs.tags }} ${{ needs.snapshot.outputs.tag }}'
    steps:
      - uses: actions/checkout@v2
      - name: Save BUILD_TAG
        run: |
          ARCH=$(echo '${{ matrix.platform }}' | tr / _)
          echo "ALL_ARCHES=linux/amd64 linux/arm64/v8" >> $GITHUB_ENV
          echo "BUILD_TAG=${{ needs.snapshot.outputs.tag }}-$ARCH" >> $GITHUB_ENV
      - name: Save GIT_REVISION
        run: echo "GIT_REVISION=$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Save GIT_COMMIT
        run: echo "GIT_COMMIT=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Save commit hash, url of submodules to environment
        run: |
          node packages/xsnap/src/build.js --show-env >> $GITHUB_ENV
      - name: Compute docker-tags
        id: docker-tags
        run: |
          SDK_TAG=$(echo "${{ github.ref_name }}" | sed -ne 's!^@agoric/sdk@!!p')
          case $SDK_TAG in
            "")
              # Just a dev release.
              DOCKER_TAGS=dev
              ;;
            *)
              # A tagged SDK release.
              DOCKER_TAGS="latest $SDK_TAG"
              ;;
          esac
          echo "::set-output name=tags::$DOCKER_TAGS"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push deployment
        uses: docker/build-push-action@v2
        with:
          file: packages/deployment/Dockerfile.deployment
          context: packages/deployment/docker
          platforms: ${{ matrix.platform }}
          push: true
          tags: 'agoric/deployment:${{ env.BUILD_TAG }}'
      - name: Merge and push multi-arch images
        run: |
          IMAGE=agoric/deployment
          for TAG in ${{ steps.docker-tags.outputs.tags }} ${{ needs.snapshot.outputs.tag }}; do
            AMENDS=
            for ARCH in $ALL_ARCHES; do
              ARCHTAG=$(echo "$ARCH" | tr / _)
              AMENDS="$AMENDS --amend $IMAGE:${{ needs.snapshot.outputs.tag }}-$ARCHTAG"
            done
            docker manifest create "$IMAGE:$TAG" $AMENDS || true
            docker manifest push "$IMAGE:$TAG"
          done
      - name: Build and Push sdk
        uses: docker/build-push-action@v2
        with:
          file: packages/deployment/Dockerfile.sdk
          context: ./
          platforms: ${{ matrix.platform }}
          push: true
          tags: 'agoric/agoric-sdk:${{ env.BUILD_TAG }}'
          # When changing/adding entries here, make sure to search the whole
          # project for `@@AGORIC_DOCKER_SUBMODULES@@`
          build-args: |
            GIT_COMMIT=${{env.GIT_COMMIT}}
            MODDABLE_COMMIT_HASH=${{env.MODDABLE_COMMIT_HASH}}
            MODDABLE_URL=${{env.MODDABLE_URL}}
            XSNAP_NATIVE_COMMIT_HASH=${{env.XSNAP_NATIVE_COMMIT_HASH}}
            XSNAP_NATIVE_URL=${{env.XSNAP_NATIVE_URL}}
            GIT_REVISION=${{env.GIT_REVISION}}
      - name: Merge and push multi-arch images
        run: |
          IMAGE=agoric/agoric-sdk
          for TAG in ${{ steps.docker-tags.outputs.tags }} ${{ needs.snapshot.outputs.tag }}; do
            AMENDS=
            for ARCH in $ALL_ARCHES; do
              ARCHTAG=$(echo "$ARCH" | tr / _)
              AMENDS="$AMENDS --amend $IMAGE:${{ needs.snapshot.outputs.tag }}-$ARCHTAG"
            done
            docker manifest create "$IMAGE:$TAG" $AMENDS || true
            docker manifest push "$IMAGE:$TAG"
          done
      - name: Build and Push setup
        uses: docker/build-push-action@v2
        with:
          file: packages/deployment/Dockerfile
          context: packages/deployment
          platforms: ${{ matrix.platform }}
          tags: 'agoric/cosmic-swingset-setup:${{ env.BUILD_TAG }}'
          push: true
          build-args: |
            TAG=${{ env.BUILD_TAG }}
      - name: Merge and push multi-arch images
        run: |
          IMAGE=agoric/cosmic-swingset-setup
          for TAG in ${{ steps.docker-tags.outputs.tags }} ${{ needs.snapshot.outputs.tag }}; do
            AMENDS=
            for ARCH in $ALL_ARCHES; do
              ARCHTAG=$(echo "$ARCH" | tr / _)
              AMENDS="$AMENDS --amend $IMAGE:${{ needs.snapshot.outputs.tag }}-$ARCHTAG"
            done
            docker manifest create "$IMAGE:$TAG" $AMENDS || true
            docker manifest push "$IMAGE:$TAG"
          done
      - name: notify on failure
        if: failure()
        uses: ./.github/actions/notify-status
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          from: ${{ secrets.NOTIFY_EMAIL_FROM }}
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          password: ${{ secrets.NOTIFY_EMAIL_PASSWORD }}

  # This is currently needed for the relayer integration test framework.
  # It just runs agoric/agoric-sdk with a "single-node" argument.
  docker-ibc-alpha:
    needs: [docker-sdk, snapshot]
    runs-on: ubuntu-latest
    if: ${{ needs.docker-sdk.outputs.tag }} != dev
    steps:
      - uses: actions/checkout@v2
      - name: Save SDK_TAG
        run: echo "SDK_TAG=${{ needs.snapshot.outputs.tag }}" >> $GITHUB_ENV
      - name: Prefix tags
        id: prefix-tags
        run: |
          IMAGE="agoric/agoric-sdk"
          for TAG in ibc-alpha; do
            PREFIXED="$PREFIXED$sep$IMAGE:$TAG"
            sep=,
          done
          echo "::set-output name=tags::$PREFIXED"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          file: packages/deployment/Dockerfile.ibc-alpha
          context: packages/deployment/docker
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: '${{ steps.prefix-tags.outputs.tags }}'
          build-args: |
            SDK_TAG=${{env.SDK_TAG}}
      - name: notify on failure
        if: failure()
        uses: ./.github/actions/notify-status
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          from: ${{ secrets.NOTIFY_EMAIL_FROM }}
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          password: ${{ secrets.NOTIFY_EMAIL_PASSWORD }}

  docker-solo:
    needs: docker-sdk
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Prefix tags
        id: prefix-tags
        run: |
          IMAGE="agoric/cosmic-swingset-solo"
          for TAG in ${{ needs.docker-sdk.outputs.tags }}; do
            PREFIXED="$PREFIXED$sep$IMAGE:$TAG"
            sep=,
          done
          echo "::set-output name=tags::$PREFIXED"
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and Push
        uses: docker/build-push-action@v2
        with:
          file: packages/solo/Dockerfile
          context: packages/solo
          platforms: linux/amd64,linux/arm64/v8
          push: true
          tags: '${{ steps.prefix-tags.outputs.tags }}'
      - name: notify on failure
        if: failure()
        uses: ./.github/actions/notify-status
        with:
          webhook: ${{ secrets.SLACK_WEBHOOK_URL }}
          from: ${{ secrets.NOTIFY_EMAIL_FROM }}
          to: ${{ secrets.NOTIFY_EMAIL_TO }}
          password: ${{ secrets.NOTIFY_EMAIL_PASSWORD }}
