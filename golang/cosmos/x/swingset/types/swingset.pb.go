// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/swingset/swingset.proto

package types

import (
	fmt "fmt"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Params are the swingset configuration/governance parameters.
type Params struct {
	// Map from unit name to a value in SwingSet "beans".
	// Must not be negative.
	//
	// These values are used by SwingSet to normalize named per-resource charges
	// (maybe rent) in a single Nat usage unit, the "bean".
	//
	// The structure and interpretation of this map and the units therein is
	// entirely determined by the JS-level code.
	BeansPerUnit map[string]Beans `protobuf:"bytes,1,rep,name=beans_per_unit,json=beansPerUnit,proto3" json:"beans_per_unit" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The price in Coins per the unit named "fee".  This value is used by
	// cosmic-swingset JS code to decide how many tokens to charge.
	//
	// cost = beans_used * fee_unit_price / beans_per_unit["fee"]
	FeeUnitPrice github_com_cosmos_cosmos_sdk_types.Coins `protobuf:"bytes,2,rep,name=fee_unit_price,json=feeUnitPrice,proto3,castrepeated=github.com/cosmos/cosmos-sdk/types.Coins" json:"fee_unit_price"`
}

func (m *Params) Reset()      { *m = Params{} }
func (*Params) ProtoMessage() {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9c341e0de15f8b, []int{0}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetBeansPerUnit() map[string]Beans {
	if m != nil {
		return m.BeansPerUnit
	}
	return nil
}

func (m *Params) GetFeeUnitPrice() github_com_cosmos_cosmos_sdk_types.Coins {
	if m != nil {
		return m.FeeUnitPrice
	}
	return nil
}

// Beans are a Nat unit that is used to ascribe accounting value to other
// SwingSet-level units.
type Beans struct {
	Whole github_com_cosmos_cosmos_sdk_types.Uint `protobuf:"bytes,1,opt,name=whole,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Uint" json:"whole"`
}

func (m *Beans) Reset()         { *m = Beans{} }
func (m *Beans) String() string { return proto.CompactTextString(m) }
func (*Beans) ProtoMessage()    {}
func (*Beans) Descriptor() ([]byte, []int) {
	return fileDescriptor_ff9c341e0de15f8b, []int{1}
}
func (m *Beans) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Beans) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Beans.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Beans) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Beans.Merge(m, src)
}
func (m *Beans) XXX_Size() int {
	return m.Size()
}
func (m *Beans) XXX_DiscardUnknown() {
	xxx_messageInfo_Beans.DiscardUnknown(m)
}

var xxx_messageInfo_Beans proto.InternalMessageInfo

func init() {
	proto.RegisterType((*Params)(nil), "agoric.swingset.Params")
	proto.RegisterMapType((map[string]Beans)(nil), "agoric.swingset.Params.BeansPerUnitEntry")
	proto.RegisterType((*Beans)(nil), "agoric.swingset.Beans")
}

func init() { proto.RegisterFile("agoric/swingset/swingset.proto", fileDescriptor_ff9c341e0de15f8b) }

var fileDescriptor_ff9c341e0de15f8b = []byte{
	// 399 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xb1, 0xae, 0x12, 0x41,
	0x14, 0x86, 0x77, 0xb8, 0x97, 0x1b, 0x9d, 0x7b, 0x83, 0xba, 0x31, 0x06, 0x29, 0x66, 0x09, 0x8d,
	0x6b, 0xa2, 0x33, 0x82, 0x8d, 0xc1, 0xca, 0x35, 0xf4, 0x64, 0xe3, 0xc6, 0xc4, 0x86, 0xcc, 0xae,
	0xc3, 0x32, 0x01, 0x66, 0xd6, 0x9d, 0x01, 0xe4, 0x2d, 0x2c, 0x2d, 0xa9, 0xed, 0x7d, 0x07, 0x4a,
	0x4a, 0x63, 0x81, 0x06, 0x1a, 0x1f, 0xc3, 0xcc, 0x0c, 0x28, 0x91, 0xc6, 0x6a, 0x4f, 0xf6, 0x3f,
	0xe7, 0xff, 0xbf, 0x93, 0x39, 0x10, 0xd1, 0x5c, 0x96, 0x3c, 0x23, 0x6a, 0xc1, 0x45, 0xae, 0x98,
	0xfe, 0x53, 0xe0, 0xa2, 0x94, 0x5a, 0xfa, 0x77, 0x9c, 0x8e, 0x8f, 0xbf, 0x1b, 0xf7, 0x73, 0x99,
	0x4b, 0xab, 0x11, 0x53, 0xb9, 0xb6, 0x06, 0xca, 0xa4, 0x9a, 0x4a, 0x45, 0x52, 0xaa, 0x18, 0x99,
	0xb7, 0x53, 0xa6, 0x69, 0x9b, 0x64, 0x92, 0x0b, 0xa7, 0xb7, 0xbe, 0x56, 0xe0, 0x55, 0x9f, 0x96,
	0x74, 0xaa, 0xfc, 0x04, 0xd6, 0x52, 0x46, 0x85, 0x1a, 0x14, 0xac, 0x1c, 0xcc, 0x04, 0xd7, 0x75,
	0xd0, 0xbc, 0x08, 0xaf, 0x3b, 0x8f, 0xf1, 0x3f, 0x51, 0xd8, 0x0d, 0xe0, 0xc8, 0x74, 0xf7, 0x59,
	0x99, 0x08, 0xae, 0x7b, 0x42, 0x97, 0xcb, 0xe8, 0x72, 0xbd, 0x0d, 0xbc, 0xf8, 0x26, 0x3d, 0x11,
	0xfc, 0x0f, 0xb0, 0x36, 0x64, 0xcc, 0x1a, 0x0e, 0x8a, 0x92, 0x67, 0xac, 0x5e, 0xb1, 0xb6, 0x0f,
	0xb1, 0x43, 0xc3, 0x06, 0x0d, 0x1f, 0xd0, 0xf0, 0x6b, 0xc9, 0x45, 0xf4, 0xcc, 0xd8, 0x7c, 0xf9,
	0x11, 0x84, 0x39, 0xd7, 0xa3, 0x59, 0x8a, 0x33, 0x39, 0x25, 0x87, 0x3d, 0xdc, 0xe7, 0xa9, 0x7a,
	0x3f, 0x26, 0x7a, 0x59, 0x30, 0x65, 0x07, 0x54, 0x7c, 0x33, 0x64, 0xcc, 0xa4, 0xf5, 0x4d, 0x40,
	0xe3, 0x2d, 0xbc, 0x77, 0xc6, 0xe6, 0xdf, 0x85, 0x17, 0x63, 0xb6, 0xac, 0x83, 0x26, 0x08, 0x6f,
	0xc7, 0xa6, 0xf4, 0x9f, 0xc0, 0xea, 0x9c, 0x4e, 0x66, 0x06, 0x08, 0x84, 0xd7, 0x9d, 0x07, 0x67,
	0x7b, 0x5a, 0x93, 0xd8, 0x35, 0x75, 0x2b, 0x2f, 0x40, 0xf7, 0xd6, 0xe7, 0x55, 0xe0, 0xfd, 0x5a,
	0x05, 0xa0, 0xf5, 0x06, 0x56, 0xad, 0xea, 0xf7, 0x60, 0x75, 0x31, 0x92, 0x13, 0xe6, 0x8c, 0x23,
	0x62, 0xd0, 0xbf, 0x6f, 0x83, 0x47, 0xff, 0x81, 0x9e, 0x70, 0xa1, 0x63, 0x37, 0xdd, 0xbd, 0x34,
	0xae, 0x51, 0xb2, 0xde, 0x21, 0xb0, 0xd9, 0x21, 0xf0, 0x73, 0x87, 0xc0, 0xa7, 0x3d, 0xf2, 0x36,
	0x7b, 0xe4, 0x7d, 0xdb, 0x23, 0xef, 0xdd, 0xcb, 0x13, 0xbf, 0x57, 0xee, 0x32, 0x1c, 0xad, 0xf5,
	0xcb, 0xe5, 0x84, 0x8a, 0xfc, 0x18, 0xf4, 0xf1, 0xef, 0xd1, 0xd8, 0xa0, 0xf4, 0xca, 0xbe, 0xf5,
	0xf3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x51, 0x54, 0x49, 0x43, 0x54, 0x02, 0x00, 0x00,
}

func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BeansPerUnit) != len(that1.BeansPerUnit) {
		return false
	}
	for i := range this.BeansPerUnit {
		a := this.BeansPerUnit[i]
		b := that1.BeansPerUnit[i]
		if !(&a).Equal(&b) {
			return false
		}
	}
	if len(this.FeeUnitPrice) != len(that1.FeeUnitPrice) {
		return false
	}
	for i := range this.FeeUnitPrice {
		if !this.FeeUnitPrice[i].Equal(&that1.FeeUnitPrice[i]) {
			return false
		}
	}
	return true
}
func (this *Beans) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Beans)
	if !ok {
		that2, ok := that.(Beans)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Whole.Equal(that1.Whole) {
		return false
	}
	return true
}
func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.FeeUnitPrice) > 0 {
		for iNdEx := len(m.FeeUnitPrice) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.FeeUnitPrice[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwingset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.BeansPerUnit) > 0 {
		for k := range m.BeansPerUnit {
			v := m.BeansPerUnit[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintSwingset(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintSwingset(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintSwingset(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Beans) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Beans) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Beans) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size := m.Whole.Size()
		i -= size
		if _, err := m.Whole.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintSwingset(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintSwingset(dAtA []byte, offset int, v uint64) int {
	offset -= sovSwingset(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BeansPerUnit) > 0 {
		for k, v := range m.BeansPerUnit {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovSwingset(uint64(len(k))) + 1 + l + sovSwingset(uint64(l))
			n += mapEntrySize + 1 + sovSwingset(uint64(mapEntrySize))
		}
	}
	if len(m.FeeUnitPrice) > 0 {
		for _, e := range m.FeeUnitPrice {
			l = e.Size()
			n += 1 + l + sovSwingset(uint64(l))
		}
	}
	return n
}

func (m *Beans) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Whole.Size()
	n += 1 + l + sovSwingset(uint64(l))
	return n
}

func sovSwingset(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSwingset(x uint64) (n int) {
	return sovSwingset(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwingset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BeansPerUnit", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwingset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwingset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwingset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BeansPerUnit == nil {
				m.BeansPerUnit = make(map[string]Beans)
			}
			var mapkey string
			mapvalue := &Beans{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowSwingset
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSwingset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthSwingset
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthSwingset
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowSwingset
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthSwingset
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthSwingset
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Beans{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipSwingset(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthSwingset
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BeansPerUnit[mapkey] = *mapvalue
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeeUnitPrice", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwingset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSwingset
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSwingset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FeeUnitPrice = append(m.FeeUnitPrice, types.Coin{})
			if err := m.FeeUnitPrice[len(m.FeeUnitPrice)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwingset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwingset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Beans) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSwingset
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Beans: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Beans: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Whole", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSwingset
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSwingset
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSwingset
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Whole.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSwingset(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSwingset
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSwingset(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSwingset
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwingset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSwingset
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSwingset
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSwingset
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSwingset
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSwingset        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSwingset          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSwingset = fmt.Errorf("proto: unexpected end of group")
)
