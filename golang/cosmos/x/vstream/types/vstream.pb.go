// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/vstream/vstream.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// StreamState is the state of the stream as of this cell.
type StreamCell_StreamState int32

const (
	// STREAM_STATE_UNSPECIFIED means streaming state is unknown (probably
	// before any values have been published).
	StreamCell_STREAM_STATE_UNSPECIFIED StreamCell_StreamState = 0
	// STREAM_STATE_STREAMING means the stream is producing more values.
	StreamCell_STREAM_STATE_STREAMING StreamCell_StreamState = 1
	// STREAM_STATE_FINISHED means the stream has terminated with a value.
	StreamCell_STREAM_STATE_FINISHED StreamCell_StreamState = 2
	// STREAM_STATE_FAILURE means the stream has terminated with an error.
	StreamCell_STREAM_STATE_FAILURE StreamCell_StreamState = 3
)

var StreamCell_StreamState_name = map[int32]string{
	0: "STREAM_STATE_UNSPECIFIED",
	1: "STREAM_STATE_STREAMING",
	2: "STREAM_STATE_FINISHED",
	3: "STREAM_STATE_FAILURE",
}

var StreamCell_StreamState_value = map[string]int32{
	"STREAM_STATE_UNSPECIFIED": 0,
	"STREAM_STATE_STREAMING":   1,
	"STREAM_STATE_FINISHED":    2,
	"STREAM_STATE_FAILURE":     3,
}

func (x StreamCell_StreamState) String() string {
	return proto.EnumName(StreamCell_StreamState_name, int32(x))
}

func (StreamCell_StreamState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_9ac5c9d80bb2d541, []int{0, 0}
}

// StreamCell represents one publish state in a vstream stream.
type StreamCell struct {
	// Chronologically-ordered list of values for this cell.
	Values [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// The block height in which this cell was last updated.
	UpdatedBlockHeight int64 `protobuf:"varint,2,opt,name=updated_block_height,json=updatedBlockHeight,proto3" json:"updated_block_height" yaml:"updated_block_height"`
	// The state of the stream.
	State StreamCell_StreamState `protobuf:"varint,3,opt,name=state,proto3,enum=agoric.vstream.StreamCell_StreamState" json:"state,omitempty"`
	// The terminal error, if state=STREAM_STATE_FAILURE.
	Error string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
	// The reference to the prior cell in the stream.
	Prior StreamCellReference `protobuf:"bytes,5,opt,name=prior,proto3" json:"prior"`
}

func (m *StreamCell) Reset()         { *m = StreamCell{} }
func (m *StreamCell) String() string { return proto.CompactTextString(m) }
func (*StreamCell) ProtoMessage()    {}
func (*StreamCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac5c9d80bb2d541, []int{0}
}
func (m *StreamCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamCell.Merge(m, src)
}
func (m *StreamCell) XXX_Size() int {
	return m.Size()
}
func (m *StreamCell) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamCell.DiscardUnknown(m)
}

var xxx_messageInfo_StreamCell proto.InternalMessageInfo

func (m *StreamCell) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *StreamCell) GetUpdatedBlockHeight() int64 {
	if m != nil {
		return m.UpdatedBlockHeight
	}
	return 0
}

func (m *StreamCell) GetState() StreamCell_StreamState {
	if m != nil {
		return m.State
	}
	return StreamCell_STREAM_STATE_UNSPECIFIED
}

func (m *StreamCell) GetError() string {
	if m != nil {
		return m.Error
	}
	return ""
}

func (m *StreamCell) GetPrior() StreamCellReference {
	if m != nil {
		return m.Prior
	}
	return StreamCellReference{}
}

// StreamCellReference is data that refers to a particular stream cell value.
type StreamCellReference struct {
	// The height at which the cell is stored.
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height" yaml:"block_height"`
	// The store name under which the cell is stored.
	StoreName string `protobuf:"bytes,2,opt,name=store_name,json=storeName,proto3" json:"store_name" yaml:"store_name"`
	// The subkey under which the cell is stored.
	StoreSubkey []byte `protobuf:"bytes,3,opt,name=store_subkey,json=storeSubkey,proto3" json:"store_subkey" yaml:"store_subkey"`
	// The count of the values before the referenced one.
	ValuesCount uint64 `protobuf:"varint,4,opt,name=values_count,json=valuesCount,proto3" json:"values_count" yaml:"values_count"`
}

func (m *StreamCellReference) Reset()         { *m = StreamCellReference{} }
func (m *StreamCellReference) String() string { return proto.CompactTextString(m) }
func (*StreamCellReference) ProtoMessage()    {}
func (*StreamCellReference) Descriptor() ([]byte, []int) {
	return fileDescriptor_9ac5c9d80bb2d541, []int{1}
}
func (m *StreamCellReference) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamCellReference) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamCellReference.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamCellReference) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamCellReference.Merge(m, src)
}
func (m *StreamCellReference) XXX_Size() int {
	return m.Size()
}
func (m *StreamCellReference) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamCellReference.DiscardUnknown(m)
}

var xxx_messageInfo_StreamCellReference proto.InternalMessageInfo

func (m *StreamCellReference) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *StreamCellReference) GetStoreName() string {
	if m != nil {
		return m.StoreName
	}
	return ""
}

func (m *StreamCellReference) GetStoreSubkey() []byte {
	if m != nil {
		return m.StoreSubkey
	}
	return nil
}

func (m *StreamCellReference) GetValuesCount() uint64 {
	if m != nil {
		return m.ValuesCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("agoric.vstream.StreamCell_StreamState", StreamCell_StreamState_name, StreamCell_StreamState_value)
	proto.RegisterType((*StreamCell)(nil), "agoric.vstream.StreamCell")
	proto.RegisterType((*StreamCellReference)(nil), "agoric.vstream.StreamCellReference")
}

func init() { proto.RegisterFile("agoric/vstream/vstream.proto", fileDescriptor_9ac5c9d80bb2d541) }

var fileDescriptor_9ac5c9d80bb2d541 = []byte{
	// 528 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x93, 0xfe, 0x59, 0xe8, 0xb4, 0x2c, 0x75, 0xb6, 0x2e, 0x71, 0x5d, 0x92, 0x92, 0x05,
	0xed, 0xc5, 0x06, 0xd6, 0x83, 0x50, 0x04, 0x69, 0xba, 0x59, 0x37, 0xa2, 0x45, 0x26, 0xdd, 0x8b,
	0x97, 0x90, 0xa6, 0x63, 0x5a, 0x9a, 0x74, 0xca, 0x64, 0xba, 0x58, 0xf0, 0x43, 0xf8, 0x11, 0x3c,
	0xfa, 0x25, 0xbc, 0xef, 0x71, 0x8f, 0x9e, 0x82, 0xb4, 0x17, 0xe9, 0x71, 0x3f, 0x81, 0x64, 0xa6,
	0xda, 0x44, 0xea, 0x29, 0xf3, 0xfc, 0x9e, 0x99, 0x37, 0x6f, 0xf2, 0xcc, 0x0b, 0x4e, 0xbd, 0x80,
	0xd0, 0x89, 0x6f, 0xdc, 0xc4, 0x8c, 0x62, 0x2f, 0xfa, 0xf3, 0x6c, 0xcf, 0x29, 0x61, 0x04, 0x1e,
	0x0a, 0xb7, 0xbd, 0xa5, 0x27, 0x8d, 0x80, 0x04, 0x84, 0x5b, 0x46, 0xba, 0x12, 0xbb, 0xf4, 0x6f,
	0x45, 0x00, 0x1c, 0xbe, 0xa1, 0x87, 0xc3, 0x10, 0x1e, 0x83, 0x83, 0x1b, 0x2f, 0x5c, 0xe0, 0x58,
	0x91, 0x9b, 0xc5, 0x56, 0x0d, 0x6d, 0x15, 0x9c, 0x80, 0xc6, 0x62, 0x3e, 0xf2, 0x18, 0x1e, 0xb9,
	0xc3, 0x90, 0xf8, 0x53, 0x77, 0x8c, 0x27, 0xc1, 0x98, 0x29, 0x85, 0xa6, 0xdc, 0x2a, 0x9a, 0x2f,
	0x36, 0x89, 0xb6, 0xd7, 0xbf, 0x4f, 0xb4, 0xc7, 0x4b, 0x2f, 0x0a, 0x3b, 0xfa, 0x3e, 0x57, 0x47,
	0x70, 0x8b, 0xcd, 0x94, 0x5e, 0x71, 0x08, 0x5f, 0x82, 0x72, 0xcc, 0x3c, 0x86, 0x95, 0x62, 0x53,
	0x6e, 0x1d, 0x9e, 0x3f, 0x69, 0xe7, 0xbf, 0xa3, 0xbd, 0xeb, 0x76, 0xbb, 0x74, 0xd2, 0xdd, 0x48,
	0x1c, 0x82, 0x0d, 0x50, 0xc6, 0x94, 0x12, 0xaa, 0x94, 0x9a, 0x72, 0xab, 0x82, 0x84, 0x80, 0xaf,
	0x40, 0x79, 0x4e, 0x27, 0x84, 0x2a, 0xe5, 0xa6, 0xdc, 0xaa, 0x9e, 0x9f, 0xfd, 0xbf, 0x26, 0xc2,
	0x1f, 0x31, 0xc5, 0x33, 0x1f, 0x9b, 0xa5, 0xdb, 0x44, 0x93, 0x90, 0x38, 0xa7, 0x7f, 0x06, 0xd5,
	0xcc, 0xcb, 0xe0, 0x29, 0x50, 0x9c, 0x01, 0xb2, 0xba, 0xef, 0x5c, 0x67, 0xd0, 0x1d, 0x58, 0xee,
	0x75, 0xdf, 0x79, 0x6f, 0xf5, 0xec, 0x4b, 0xdb, 0xba, 0xa8, 0x4b, 0xf0, 0x04, 0x1c, 0xe7, 0x5c,
	0x21, 0xec, 0xfe, 0xeb, 0xba, 0x0c, 0x1f, 0x81, 0x87, 0x39, 0xef, 0xd2, 0xee, 0xdb, 0xce, 0x95,
	0x75, 0x51, 0x2f, 0x40, 0x05, 0x34, 0xf2, 0x56, 0xd7, 0x7e, 0x7b, 0x8d, 0xac, 0x7a, 0xb1, 0x53,
	0xfa, 0xf5, 0x55, 0x93, 0xf4, 0xef, 0x05, 0x70, 0xb4, 0xa7, 0x51, 0xf8, 0x06, 0xd4, 0x72, 0x99,
	0xc8, 0x3c, 0x93, 0xa7, 0x9b, 0x44, 0xab, 0xfd, 0x93, 0xc5, 0x91, 0xc8, 0x22, 0x9f, 0x41, 0x75,
	0x98, 0xf9, 0xf9, 0x26, 0x00, 0x31, 0x23, 0x14, 0xbb, 0x33, 0x2f, 0xc2, 0x3c, 0xdd, 0x8a, 0x79,
	0xb6, 0x49, 0xb4, 0x0c, 0xbd, 0x4f, 0xb4, 0x07, 0xa2, 0xce, 0x8e, 0xe9, 0xa8, 0xc2, 0x45, 0xdf,
	0x8b, 0x78, 0x3f, 0xc2, 0x89, 0x17, 0xc3, 0x29, 0x5e, 0xf2, 0x1c, 0x6b, 0xa2, 0x9f, 0x2c, 0xdf,
	0xf5, 0x93, 0xa5, 0x3a, 0xaa, 0x72, 0xe9, 0x70, 0x95, 0xd6, 0x12, 0x37, 0xd0, 0xf5, 0xc9, 0x62,
	0xc6, 0x78, 0xaa, 0x25, 0x51, 0x2b, 0xcb, 0x77, 0xb5, 0xb2, 0x54, 0x47, 0x55, 0x21, 0x7b, 0xa9,
	0x32, 0x07, 0xb7, 0x2b, 0x55, 0xbe, 0x5b, 0xa9, 0xf2, 0xcf, 0x95, 0x2a, 0x7f, 0x59, 0xab, 0xd2,
	0xdd, 0x5a, 0x95, 0x7e, 0xac, 0x55, 0xe9, 0x43, 0x27, 0x98, 0xb0, 0xf1, 0x62, 0xd8, 0xf6, 0x49,
	0x64, 0x74, 0xc5, 0x4c, 0x89, 0x0b, 0xf2, 0x2c, 0x1e, 0x4d, 0x8d, 0x80, 0x84, 0xde, 0x2c, 0x30,
	0x7c, 0x12, 0x47, 0x24, 0x36, 0x3e, 0xfd, 0x1d, 0x37, 0xb6, 0x9c, 0xe3, 0x78, 0x78, 0xc0, 0xe7,
	0xe8, 0xf9, 0xef, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xbf, 0x33, 0x20, 0x8d, 0x03, 0x00, 0x00,
}

func (m *StreamCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Prior.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintVstream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Error) > 0 {
		i -= len(m.Error)
		copy(dAtA[i:], m.Error)
		i = encodeVarintVstream(dAtA, i, uint64(len(m.Error)))
		i--
		dAtA[i] = 0x22
	}
	if m.State != 0 {
		i = encodeVarintVstream(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x18
	}
	if m.UpdatedBlockHeight != 0 {
		i = encodeVarintVstream(dAtA, i, uint64(m.UpdatedBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintVstream(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamCellReference) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamCellReference) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamCellReference) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ValuesCount != 0 {
		i = encodeVarintVstream(dAtA, i, uint64(m.ValuesCount))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StoreSubkey) > 0 {
		i -= len(m.StoreSubkey)
		copy(dAtA[i:], m.StoreSubkey)
		i = encodeVarintVstream(dAtA, i, uint64(len(m.StoreSubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StoreName) > 0 {
		i -= len(m.StoreName)
		copy(dAtA[i:], m.StoreName)
		i = encodeVarintVstream(dAtA, i, uint64(len(m.StoreName)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintVstream(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintVstream(dAtA []byte, offset int, v uint64) int {
	offset -= sovVstream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovVstream(uint64(l))
		}
	}
	if m.UpdatedBlockHeight != 0 {
		n += 1 + sovVstream(uint64(m.UpdatedBlockHeight))
	}
	if m.State != 0 {
		n += 1 + sovVstream(uint64(m.State))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovVstream(uint64(l))
	}
	l = m.Prior.Size()
	n += 1 + l + sovVstream(uint64(l))
	return n
}

func (m *StreamCellReference) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovVstream(uint64(m.BlockHeight))
	}
	l = len(m.StoreName)
	if l > 0 {
		n += 1 + l + sovVstream(uint64(l))
	}
	l = len(m.StoreSubkey)
	if l > 0 {
		n += 1 + l + sovVstream(uint64(l))
	}
	if m.ValuesCount != 0 {
		n += 1 + sovVstream(uint64(m.ValuesCount))
	}
	return n
}

func sovVstream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVstream(x uint64) (n int) {
	return sovVstream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBlockHeight", wireType)
			}
			m.UpdatedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= StreamCell_StreamState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prior", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVstream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prior.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamCellReference) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVstream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCellReference: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCellReference: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVstream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVstream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVstream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreSubkey = append(m.StoreSubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.StoreSubkey == nil {
				m.StoreSubkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValuesCount", wireType)
			}
			m.ValuesCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValuesCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVstream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVstream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVstream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVstream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVstream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVstream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVstream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVstream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVstream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVstream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVstream = fmt.Errorf("proto: unexpected end of group")
)
