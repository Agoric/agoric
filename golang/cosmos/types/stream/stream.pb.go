// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agoric/types/stream.proto

package stream

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// EndState is the state of the stream at the last position in this cell.
type StreamCell_EndState int32

const (
	// END_STATE_UNSPECIFIED means unknown end state.
	StreamCell_END_STATE_UNSPECIFIED StreamCell_EndState = 0
	// END_STATE_APPENDABLE means that appending to this cell is possible.
	StreamCell_END_STATE_APPENDABLE StreamCell_EndState = 1
	// END_STATE_FINISHED means this cell has terminated.
	StreamCell_END_STATE_FINISHED StreamCell_EndState = 2
	// END_STATE_FAILURE means this cell has terminated with an error value.
	StreamCell_END_STATE_FAILURE StreamCell_EndState = 3
)

var StreamCell_EndState_name = map[int32]string{
	0: "END_STATE_UNSPECIFIED",
	1: "END_STATE_APPENDABLE",
	2: "END_STATE_FINISHED",
	3: "END_STATE_FAILURE",
}

var StreamCell_EndState_value = map[string]int32{
	"END_STATE_UNSPECIFIED": 0,
	"END_STATE_APPENDABLE":  1,
	"END_STATE_FINISHED":    2,
	"END_STATE_FAILURE":     3,
}

func (x StreamCell_EndState) String() string {
	return proto.EnumName(StreamCell_EndState_name, int32(x))
}

func (StreamCell_EndState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_2bf761c79ece967d, []int{0, 0}
}

// StreamCell represents one publish state in a vstream stream.
type StreamCell struct {
	// Chronologically-ordered list of values for this cell.
	// If state=END_STATE_FAILURE, the last value is the serialised error.
	Values [][]byte `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
	// The block height in which this cell was last updated.
	UpdatedBlockHeight int64 `protobuf:"varint,2,opt,name=updated_block_height,json=updatedBlockHeight,proto3" json:"updated_block_height" yaml:"updated_block_height"`
	// The state as of the last value.
	EndState StreamCell_EndState `protobuf:"varint,3,opt,name=end_state,json=endState,proto3,enum=agoric.types.StreamCell_EndState" json:"end_state" yaml:"end_state"`
	// The prior position in the stream.  If this is the first cell in the
	// stream, this will be the default value. All other cells will have a
	// reference with a nonzero block height.
	Prior StreamPosition `protobuf:"bytes,4,opt,name=prior,proto3" json:"prior"`
}

func (m *StreamCell) Reset()         { *m = StreamCell{} }
func (m *StreamCell) String() string { return proto.CompactTextString(m) }
func (*StreamCell) ProtoMessage()    {}
func (*StreamCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bf761c79ece967d, []int{0}
}
func (m *StreamCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamCell.Merge(m, src)
}
func (m *StreamCell) XXX_Size() int {
	return m.Size()
}
func (m *StreamCell) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamCell.DiscardUnknown(m)
}

var xxx_messageInfo_StreamCell proto.InternalMessageInfo

func (m *StreamCell) GetValues() [][]byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *StreamCell) GetUpdatedBlockHeight() int64 {
	if m != nil {
		return m.UpdatedBlockHeight
	}
	return 0
}

func (m *StreamCell) GetEndState() StreamCell_EndState {
	if m != nil {
		return m.EndState
	}
	return StreamCell_END_STATE_UNSPECIFIED
}

func (m *StreamCell) GetPrior() StreamPosition {
	if m != nil {
		return m.Prior
	}
	return StreamPosition{}
}

// StreamPosition is data that refers to a particular stream cell value.
type StreamPosition struct {
	// The height at which the cell is stored.
	BlockHeight int64 `protobuf:"varint,1,opt,name=block_height,json=blockHeight,proto3" json:"block_height" yaml:"block_height"`
	// The low-level (Cosmos SDK multistore) store name under which the cell is stored.
	StoreName string `protobuf:"bytes,2,opt,name=store_name,json=storeName,proto3" json:"store_name" yaml:"store_name"`
	// The low-level (Cosmos SDK multistore) store subkey under which the cell is stored.
	StoreSubkey []byte `protobuf:"bytes,3,opt,name=store_subkey,json=storeSubkey,proto3" json:"store_subkey" yaml:"store_subkey"`
	// The sequence number of the value at this position.  Necessary to allow
	// references to a fork point within a cell.
	SequenceNumber uint64 `protobuf:"varint,4,opt,name=sequence_number,json=sequenceNumber,proto3" json:"sequence_number" yaml:"sequence_number"`
}

func (m *StreamPosition) Reset()         { *m = StreamPosition{} }
func (m *StreamPosition) String() string { return proto.CompactTextString(m) }
func (*StreamPosition) ProtoMessage()    {}
func (*StreamPosition) Descriptor() ([]byte, []int) {
	return fileDescriptor_2bf761c79ece967d, []int{1}
}
func (m *StreamPosition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *StreamPosition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_StreamPosition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *StreamPosition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamPosition.Merge(m, src)
}
func (m *StreamPosition) XXX_Size() int {
	return m.Size()
}
func (m *StreamPosition) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamPosition.DiscardUnknown(m)
}

var xxx_messageInfo_StreamPosition proto.InternalMessageInfo

func (m *StreamPosition) GetBlockHeight() int64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func (m *StreamPosition) GetStoreName() string {
	if m != nil {
		return m.StoreName
	}
	return ""
}

func (m *StreamPosition) GetStoreSubkey() []byte {
	if m != nil {
		return m.StoreSubkey
	}
	return nil
}

func (m *StreamPosition) GetSequenceNumber() uint64 {
	if m != nil {
		return m.SequenceNumber
	}
	return 0
}

func init() {
	proto.RegisterEnum("agoric.types.StreamCell_EndState", StreamCell_EndState_name, StreamCell_EndState_value)
	proto.RegisterType((*StreamCell)(nil), "agoric.types.StreamCell")
	proto.RegisterType((*StreamPosition)(nil), "agoric.types.StreamPosition")
}

func init() { proto.RegisterFile("agoric/types/stream.proto", fileDescriptor_2bf761c79ece967d) }

var fileDescriptor_2bf761c79ece967d = []byte{
	// 540 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0xc1, 0x6e, 0xda, 0x4c,
	0x10, 0xc7, 0xed, 0xc0, 0x17, 0x25, 0x0b, 0xe2, 0x23, 0x5b, 0x82, 0x48, 0x5b, 0x79, 0x89, 0x7b,
	0x28, 0x97, 0xd8, 0x52, 0x7a, 0x48, 0x95, 0x1b, 0x0e, 0x8e, 0x42, 0x15, 0x59, 0xd4, 0x4e, 0x7a,
	0xe8, 0xc5, 0xb2, 0x61, 0x65, 0x2c, 0x6c, 0x2f, 0xf5, 0xda, 0x95, 0x78, 0x8b, 0x3e, 0x42, 0xd5,
	0x67, 0xe9, 0x21, 0xc7, 0x1c, 0x7b, 0xb2, 0x2a, 0xb8, 0x54, 0x1c, 0x79, 0x82, 0x8a, 0x5d, 0x52,
	0x9b, 0x88, 0x1b, 0xf3, 0xfb, 0xcf, 0xcc, 0x0e, 0xf3, 0xf7, 0x80, 0x13, 0xc7, 0x23, 0xb1, 0x3f,
	0x54, 0x93, 0xd9, 0x14, 0x53, 0x95, 0x26, 0x31, 0x76, 0x42, 0x65, 0x1a, 0x93, 0x84, 0xc0, 0x2a,
	0x97, 0x14, 0x26, 0xbd, 0x6c, 0x78, 0xc4, 0x23, 0x4c, 0x50, 0xd7, 0xbf, 0x78, 0x8e, 0xfc, 0xa3,
	0x04, 0x80, 0xc5, 0x8a, 0xae, 0x70, 0x10, 0xc0, 0x26, 0xd8, 0xff, 0xea, 0x04, 0x29, 0xa6, 0x2d,
	0xb1, 0x5d, 0xea, 0x54, 0xcd, 0x4d, 0x04, 0x7d, 0xd0, 0x48, 0xa7, 0x23, 0x27, 0xc1, 0x23, 0xdb,
	0x0d, 0xc8, 0x70, 0x62, 0x8f, 0xb1, 0xef, 0x8d, 0x93, 0xd6, 0x5e, 0x5b, 0xec, 0x94, 0xb4, 0x8b,
	0x65, 0x86, 0x76, 0xea, 0xab, 0x0c, 0xbd, 0x9a, 0x39, 0x61, 0x70, 0x29, 0xef, 0x52, 0x65, 0x13,
	0x6e, 0xb0, 0xb6, 0xa6, 0x37, 0x0c, 0x42, 0x07, 0x1c, 0xe2, 0x68, 0x64, 0xd3, 0xc4, 0x49, 0x70,
	0xab, 0xd4, 0x16, 0x3b, 0xb5, 0xf3, 0x53, 0xa5, 0xf8, 0x4f, 0x94, 0x7c, 0x5e, 0x45, 0x8f, 0x46,
	0xd6, 0x3a, 0x51, 0x3b, 0x5d, 0x66, 0x28, 0xaf, 0x5b, 0x65, 0xa8, 0xce, 0xdf, 0xfd, 0x87, 0x64,
	0xf3, 0x00, 0x6f, 0x92, 0xe1, 0x7b, 0xf0, 0xdf, 0x34, 0xf6, 0x49, 0xdc, 0x2a, 0xb7, 0xc5, 0x4e,
	0xe5, 0xfc, 0xf5, 0xae, 0xf6, 0x03, 0x42, 0xfd, 0xc4, 0x27, 0x91, 0x56, 0x7e, 0xc8, 0x90, 0x60,
	0xf2, 0x02, 0x39, 0x02, 0x07, 0x4f, 0x4f, 0xc2, 0x13, 0x70, 0xac, 0x1b, 0x3d, 0xdb, 0xba, 0xeb,
	0xde, 0xe9, 0xf6, 0xbd, 0x61, 0x0d, 0xf4, 0xab, 0xfe, 0x75, 0x5f, 0xef, 0xd5, 0x05, 0xd8, 0x02,
	0x8d, 0x5c, 0xea, 0x0e, 0x06, 0xba, 0xd1, 0xeb, 0x6a, 0xb7, 0x7a, 0x5d, 0x84, 0x4d, 0x00, 0x73,
	0xe5, 0xba, 0x6f, 0xf4, 0xad, 0x1b, 0xbd, 0x57, 0xdf, 0x83, 0xc7, 0xe0, 0xa8, 0xc0, 0xbb, 0xfd,
	0xdb, 0x7b, 0x53, 0xaf, 0x97, 0x2e, 0xcb, 0x7f, 0xbe, 0x23, 0x41, 0xfe, 0xb9, 0x07, 0x6a, 0xdb,
	0x53, 0xc1, 0x0f, 0xa0, 0xba, 0x65, 0x84, 0xc8, 0x8c, 0x78, 0xbb, 0xcc, 0x50, 0xf5, 0x99, 0x01,
	0x2f, 0xf8, 0x22, 0xb6, 0x17, 0x5f, 0x71, 0x0b, 0x1b, 0xd7, 0x00, 0xa0, 0x09, 0x89, 0xb1, 0x1d,
	0x39, 0x21, 0x66, 0x96, 0x1e, 0x6a, 0x6f, 0x96, 0x19, 0x2a, 0xd0, 0x55, 0x86, 0x8e, 0x78, 0x9f,
	0x9c, 0xc9, 0xe6, 0x21, 0x0b, 0x0c, 0x27, 0xc4, 0xeb, 0x79, 0xb8, 0x42, 0x53, 0x77, 0x82, 0x67,
	0xcc, 0xb8, 0x2a, 0x9f, 0xa7, 0xc8, 0xf3, 0x79, 0x8a, 0x54, 0x36, 0x2b, 0x2c, 0xb4, 0x58, 0x04,
	0x3f, 0x81, 0xff, 0x29, 0xfe, 0x92, 0xe2, 0x68, 0x88, 0xed, 0x28, 0x0d, 0x5d, 0xcc, 0x8d, 0x2a,
	0x6b, 0x67, 0xcb, 0x0c, 0x3d, 0x97, 0x56, 0x19, 0x6a, 0x6e, 0x3a, 0x6e, 0x0b, 0xb2, 0x59, 0x7b,
	0x22, 0x06, 0x03, 0xda, 0xc7, 0x87, 0xb9, 0x24, 0x3e, 0xce, 0x25, 0xf1, 0xf7, 0x5c, 0x12, 0xbf,
	0x2d, 0x24, 0xe1, 0x71, 0x21, 0x09, 0xbf, 0x16, 0x92, 0xf0, 0xf9, 0xc2, 0xf3, 0x93, 0x71, 0xea,
	0x2a, 0x43, 0x12, 0xaa, 0x5d, 0x7e, 0x4f, 0xfc, 0x93, 0x38, 0xa3, 0xa3, 0x89, 0xea, 0x91, 0xc0,
	0x89, 0x3c, 0x75, 0x48, 0x68, 0x48, 0xe8, 0xd6, 0xa1, 0xb9, 0xfb, 0xec, 0x8a, 0xde, 0xfd, 0x0d,
	0x00, 0x00, 0xff, 0xff, 0x42, 0xa6, 0xdb, 0xd1, 0x86, 0x03, 0x00, 0x00,
}

func (m *StreamCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Prior.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintStream(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EndState != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.EndState))
		i--
		dAtA[i] = 0x18
	}
	if m.UpdatedBlockHeight != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.UpdatedBlockHeight))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Values[iNdEx])
			copy(dAtA[i:], m.Values[iNdEx])
			i = encodeVarintStream(dAtA, i, uint64(len(m.Values[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamPosition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamPosition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *StreamPosition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.SequenceNumber != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.SequenceNumber))
		i--
		dAtA[i] = 0x20
	}
	if len(m.StoreSubkey) > 0 {
		i -= len(m.StoreSubkey)
		copy(dAtA[i:], m.StoreSubkey)
		i = encodeVarintStream(dAtA, i, uint64(len(m.StoreSubkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StoreName) > 0 {
		i -= len(m.StoreName)
		copy(dAtA[i:], m.StoreName)
		i = encodeVarintStream(dAtA, i, uint64(len(m.StoreName)))
		i--
		dAtA[i] = 0x12
	}
	if m.BlockHeight != 0 {
		i = encodeVarintStream(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintStream(dAtA []byte, offset int, v uint64) int {
	offset -= sovStream(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *StreamCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Values) > 0 {
		for _, b := range m.Values {
			l = len(b)
			n += 1 + l + sovStream(uint64(l))
		}
	}
	if m.UpdatedBlockHeight != 0 {
		n += 1 + sovStream(uint64(m.UpdatedBlockHeight))
	}
	if m.EndState != 0 {
		n += 1 + sovStream(uint64(m.EndState))
	}
	l = m.Prior.Size()
	n += 1 + l + sovStream(uint64(l))
	return n
}

func (m *StreamPosition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BlockHeight != 0 {
		n += 1 + sovStream(uint64(m.BlockHeight))
	}
	l = len(m.StoreName)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	l = len(m.StoreSubkey)
	if l > 0 {
		n += 1 + l + sovStream(uint64(l))
	}
	if m.SequenceNumber != 0 {
		n += 1 + sovStream(uint64(m.SequenceNumber))
	}
	return n
}

func sovStream(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozStream(x uint64) (n int) {
	return sovStream(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *StreamCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, make([]byte, postIndex-iNdEx))
			copy(m.Values[len(m.Values)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedBlockHeight", wireType)
			}
			m.UpdatedBlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedBlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndState", wireType)
			}
			m.EndState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndState |= StreamCell_EndState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prior", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Prior.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamPosition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowStream
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamPosition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamPosition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreSubkey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthStream
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthStream
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreSubkey = append(m.StoreSubkey[:0], dAtA[iNdEx:postIndex]...)
			if m.StoreSubkey == nil {
				m.StoreSubkey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SequenceNumber", wireType)
			}
			m.SequenceNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowStream
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SequenceNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipStream(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthStream
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipStream(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowStream
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowStream
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthStream
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupStream
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthStream
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthStream        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowStream          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupStream = fmt.Errorf("proto: unexpected end of group")
)
