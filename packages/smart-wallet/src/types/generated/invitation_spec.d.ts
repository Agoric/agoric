/**
 * This file was automatically generated by json-schema-to-typescript.
 * DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
 * and run json-schema-to-typescript to regenerate this file.
 */

/**
 * Specify how to produce an invitation. See each type in the union for details.
 */
export type InvitationSpec =
  | AgoricContractInvitationSpec
  | ContractInvitationSpec
  | PurseInvitationSpec
  | ContinuingInvitationSpec;
/**
 * The method name to call
 */
export type MethodName = string;
/**
 * Optional array of arguments for the method
 */
export type MethodArgs = unknown[];

/**
 * The source of invitation is a chain of calls starting with an agoricName. The start of the pipe is a lookup of instancePath within agoricNames, each entry in the callPipe executes a call on the preceding result, and the end of the pipe is expected to return an Invitation.
 */
export interface AgoricContractInvitationSpec {
  /**
   * Source of invitation is a chain of calls starting with an agoricName.
   */
  source: 'agoricContract';
  /**
   * The instance path to look up within agoricNames.
   */
  instancePath: string[];
  /**
   * A series of calls where each entry in the callPipe executes a call on the preceding result. Each entry is a tuple of [methodName, methodArgs?] where methodName is a string and methodArgs is an optional array of any type.
   */
  // FIXME json-schema-to-typescript doesn't wrap the Array<> correctly
  callPipe: Array<[MethodName] | [MethodName, MethodArgs]>;
}
/**
 * The source is a contract, which takes an Instance to look up in Zoe.
 */
export interface ContractInvitationSpec {
  /**
   * Source is a contract (an Instance to look up in Zoe).
   */
  source: 'contract';
  /**
   * The contract instance to look up in Zoe.
   */
  instance: {
    [k: string]: unknown;
  };
  /**
   * The method name used to make the public invitation.
   */
  publicInvitationMaker: string;
  /**
   * Optional arguments to pass to the public invitation maker.
   */
  invitationArgs?: unknown[];
}
/**
 * The invitation is already in your Zoe 'invitation' purse, so we need to query it.
 */
export interface PurseInvitationSpec {
  /**
   * The invitation is already in your Zoe 'invitation' purse.
   */
  source: 'purse';
  /**
   * The contract instance associated with the purse invitation.
   */
  instance: {
    [k: string]: unknown;
  };
  /**
   * A description of the invitation to query.
   */
  description: string;
}
/**
 * A continuing invitation, where the offer result from a previous invitation had an `invitationMakers` property.
 */
export interface ContinuingInvitationSpec {
  /**
   * Continuing invitation, starting from a previous offer result that included invitation makers.
   */
  source: 'continuing';
  /**
   * The ID of the previous offer whose result included invitation makers.
   */
  previousOffer: string;
  /**
   * The method name of the invitation maker.
   */
  invitationMakerName: string;
  /**
   * Optional arguments for the invitation maker.
   */
  invitationArgs?: unknown[];
}
