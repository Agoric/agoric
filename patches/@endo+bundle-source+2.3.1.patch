diff --git a/node_modules/@endo/bundle-source/src/index.js b/node_modules/@endo/bundle-source/src/index.js
index 9eb89aa..f3960c4 100644
--- a/node_modules/@endo/bundle-source/src/index.js
+++ b/node_modules/@endo/bundle-source/src/index.js
@@ -32,6 +32,23 @@ const textEncoder = new TextEncoder();
 const textDecoder = new TextDecoder();
 const readPowers = makeReadPowers({ fs, url, crypto });
 
+// Find the longest common prefix of an array of strings.
+function longestCommonPrefix(strings) {
+  if (strings.length === 0) {
+    return '';
+  }
+  const first = strings[0];
+  const rest = strings.slice(1);
+  let i = 0;
+  for (; i < first.length; i += 1) {
+    const c = first[i];
+    if (rest.some(s => s[i] !== c)) {
+      break;
+    }
+  }
+  return first.slice(0, i);
+}
+
 function rewriteComment(node, unmapLoc) {
   node.type = 'CommentBlock';
   // Within comments...
@@ -192,6 +209,17 @@ async function bundleNestedEvaluateAndGetExports(
   });
   // console.log(output);
 
+  // Find the longest common prefix of all the source file names.
+  // We shorten the fileNames to make the bundle output deterministic.
+  const fileNameToUrlPath = fileName =>
+    readPowers.pathToFileURL(pathResolve(startFilename, fileName)).pathname;
+  const pathnames = output.map(({ fileName }) => fileNameToUrlPath(fileName));
+  const longestPrefix = longestCommonPrefix(pathnames);
+
+  // Ensure the prefix ends with a slash.
+  const pathnameEndPos = longestPrefix.lastIndexOf('/');
+  const pathnamePrefix = longestPrefix.slice(0, pathnameEndPos + 1);
+
   // Create a source bundle.
   const unsortedSourceBundle = {};
   let entrypoint;
@@ -201,8 +229,12 @@ async function bundleNestedEvaluateAndGetExports(
         throw Error(`unprepared for assets: ${chunk.fileName}`);
       }
       const { code, fileName, isEntry } = chunk;
+      const pathname = fileNameToUrlPath(fileName);
+      const shortName = pathname.startsWith(pathnamePrefix)
+        ? pathname.slice(pathnamePrefix.length)
+        : fileName;
       if (isEntry) {
-        entrypoint = fileName;
+        entrypoint = shortName;
       }
 
       const useLocationUnmap =
@@ -212,7 +244,7 @@ async function bundleNestedEvaluateAndGetExports(
         sourceMap: chunk.map,
         useLocationUnmap,
       });
-      unsortedSourceBundle[fileName] = transformedCode;
+      unsortedSourceBundle[shortName] = transformedCode;
 
       // console.log(`==== sourceBundle[${fileName}]\n${sourceBundle[fileName]}\n====`);
     }),
@@ -250,7 +282,7 @@ async function bundleNestedEvaluateAndGetExports(
   let sourceMap;
   let source;
   if (moduleFormat === 'getExport') {
-    sourceMap = `//# sourceURL=${resolvedPath}\n`;
+    sourceMap = `//# sourceURL=${DEFAULT_FILE_PREFIX}/${entrypoint}\n`;
 
     if (Object.keys(sourceBundle).length !== 1) {
       throw Error('unprepared for more than one chunk');
@@ -292,11 +324,8 @@ ${sourceMap}`;
     // This function's source code is inlined in the output bundle.
     // It figures out the exports from a given module filename.
     const nsBundle = {};
-    const nestedEvaluate = _src => {
-      throw Error('need to override nestedEvaluate');
-    };
     function computeExports(filename, exportPowers, exports) {
-      const { require: systemRequire, _log } = exportPowers;
+      const { require: systemRequire, systemEval, _log } = exportPowers;
       // This captures the endowed require.
       const match = filename.match(/^(.*)\/[^/]+$/);
       const thisdir = match ? match[1] : '.';
@@ -366,7 +395,8 @@ ${sourceMap}`;
       }
 
       // log('evaluating', code);
-      return nestedEvaluate(code)(contextRequire, exports);
+      // eslint-disable-next-line no-eval
+      return (systemEval || eval)(code)(contextRequire, exports);
     }
 
     source = `\
@@ -387,7 +417,8 @@ function getExportWithNestedEvaluate(filePrefix) {
 
   // Evaluate the entrypoint recursively, seeding the exports.
   const systemRequire = typeof require === 'undefined' ? undefined : require;
-  return computeExports(entrypoint, { require: systemRequire }, {});
+  const systemEval = typeof nestedEvaluate === 'undefined' ? undefined : nestedEvaluate;
+  return computeExports(entrypoint, { require: systemRequire, systemEval }, {});
 }
 ${sourceMap}`;
   }
diff --git a/node_modules/@endo/bundle-source/src/tool.js b/node_modules/@endo/bundle-source/src/tool.js
index fac8b82..782f850 100755
--- a/node_modules/@endo/bundle-source/src/tool.js
+++ b/node_modules/@endo/bundle-source/src/tool.js
@@ -237,5 +237,8 @@ if (isEntrypoint(import.meta.url)) {
     path: await import('path'),
     url: await import('url'),
     crypto: await import('crypto'),
-  }).catch(console.error);
+  }).catch(err => {
+    console.error(err);
+    process.exit(process.exitCode || 1);
+  });
 }
