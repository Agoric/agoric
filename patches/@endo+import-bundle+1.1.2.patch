diff --git a/node_modules/@endo/import-bundle/src/compartment-wrapper.js b/node_modules/@endo/import-bundle/src/compartment-wrapper.js
index b5bc57d..bd42014 100644
--- a/node_modules/@endo/import-bundle/src/compartment-wrapper.js
+++ b/node_modules/@endo/import-bundle/src/compartment-wrapper.js
@@ -42,10 +42,32 @@ export function wrapInescapableCompartment(
     // there are details to work out.
     c.globalThis.Compartment = NewCompartment;
 
-    for (const prop of Object.keys(inescapableGlobalProperties)) {
+    // Use Reflect.ownKeys, not Object.keys, because we want both
+    // string-named and symbol-named properties. Note that
+    // Reflect.ownKeys also includes non-enumerable keys.
+    // This differs from the longer term agreement discussed at
+    // https://www.youtube.com/watch?v=xlR21uDigGE in these ways:
+    // - The option in question should be named `inescapableGlobals` since
+    //   we want to reserve `*Properties` for descriptor copying rather
+    //   than value copying.
+    // - We don't plan to support such `*Properties` options at this time.
+    //   Rather, we should deprecate (and eventually remove) this one
+    //   once we introduce`inescapableGlobals`.
+    // - We plan to move these options to the `Compartment` constructor itself,
+    //   in which case their support in import-bundle will just forward
+    //   to `Compartment`.
+    // - Following the `assign`-like semantics agree on in that meeting,
+    //   this should only copy enumerable own properties, whereas the loop
+    //   below copies all own properties.
+    // The loop here does follow this agreement by differing from `assign` in
+    // making all the target properties non-enumerable. The agreement would
+    // further align the normal `Compartment` endowments argument to also
+    // make the target properties non-enumerable.
+    for (const prop of Reflect.ownKeys(inescapableGlobalProperties)) {
       Object.defineProperty(c.globalThis, prop, {
         value: inescapableGlobalProperties[prop],
         writable: true,
+        // properties of globalThis are generally non-enumerable
         enumerable: false,
         configurable: true,
       });
