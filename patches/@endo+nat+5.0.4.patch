diff --git a/node_modules/@endo/nat/src/index.d.ts b/node_modules/@endo/nat/src/index.d.ts
new file mode 100644
index 0000000..20bc78c
--- /dev/null
+++ b/node_modules/@endo/nat/src/index.d.ts
@@ -0,0 +1,30 @@
+/**
+ * Is `allegedNum` a number in the [contiguous range of exactly and
+ * unambiguously
+ * representable](https://esdiscuss.org/topic/more-numeric-constants-please-especially-epsilon#content-14)
+ *  natural numbers (non-negative integers)?
+ *
+ * To qualify `allegedNum` must either be a
+ * non-negative `bigint`, or a non-negative `number` representing an integer
+ * within range of [integers safely representable in
+ * floating point](https://tc39.es/ecma262/#sec-number.issafeinteger).
+ *
+ * @param {unknown} allegedNum
+ * @returns {boolean}
+ */
+export function isNat(allegedNum: unknown): boolean;
+/**
+ * If `allegedNumber` passes the `isNat` test, then return it as a bigint.
+ * Otherwise throw an appropriate error.
+ *
+ * If `allegedNum` is neither a bigint nor a number, `Nat` throws a `TypeError`.
+ * Otherwise, if it is not a [safely
+ * representable](https://esdiscuss.org/topic/more-numeric-constants-please-especially-epsilon#content-14)
+ * non-negative integer, `Nat` throws a `RangeError`.
+ * Otherwise, it is converted to a bigint if necessary and returned.
+ *
+ * @param {unknown} allegedNum
+ * @returns {bigint}
+ */
+export function Nat(allegedNum: unknown): bigint;
+//# sourceMappingURL=index.d.ts.map
\ No newline at end of file
diff --git a/node_modules/@endo/nat/src/index.d.ts.map b/node_modules/@endo/nat/src/index.d.ts.map
new file mode 100644
index 0000000..a663f87
--- /dev/null
+++ b/node_modules/@endo/nat/src/index.d.ts.map
@@ -0,0 +1 @@
+{"version":3,"file":"index.d.ts","sourceRoot":"","sources":["index.js"],"names":[],"mappings":"AAiBA;;;;;;;;;;;;;GAaG;AACH,kCAHW,OAAO,GACL,OAAO,CAWnB;AAED;;;;;;;;;;;;GAYG;AACH,gCAHW,OAAO,GACL,MAAM,CAuBlB"}
\ No newline at end of file
